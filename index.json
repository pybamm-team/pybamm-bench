{"project": "PyBaMM", "project_url": "https://www.pybamm.org/", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"3608": "8afc8f94f75b6f0b51928f43819f9894d2b91020", "4954": "801492b250a6637554d99a4662a0d85c3354ceea", "5277": "105714c9748f7c7f3824411240ab583ac6c4973a", "5978": "eff587b12cd3e41b911c4665909f3d4ab8a8f50f", "6424": "09a3c082833f876bd5f4962306340886d29fa116", "6787": "f00b8d11ec0c4169c53d6fb1e0cd58e71009e924", "7278": "e408c41c6c3c432da7fc9a49263e4fc3b454ca45", "7341": "d1d6af04c5083b6c413fe30b1af4f4add1b222e3", "8395": "0a99ea46b37bedd729f75d8d1e101122c27bb6d8", "8666": "f6cb07aa40ec406ba9eba3f90c09ccf0c5feb539", "8919": "c0a7f58f23bff963de63804011f79cbdb5ca43db", "9168": "00a93578a1e270876ea13e89dc2568dbc1a50b86", "9197": "c4ba93ffe27597c18ff1848d644d6585601e30d5", "9328": "463677471462d93e2fe1f7b7444820dc22689c30", "9369": "c737eacae81da8565fb35711260c95791a56cc54", "9449": "3a120d766fdd87b3a7f9212920c0d6d68544832f", "9483": "aa8be739b0219304dd2e933c02c82651831cfa9b", "9674": "d69db284eed874fd7b066e57db4259d0fee98fe6", "9854": "15992b32d969323f038c789340c87c2254354e55", "9953": "85c66a739896bcb678be58583ebcfac22e426004", "10003": "7f4bf8765621c462fabadb33734142062b51bfee", "10180": "7f3a4bbf124e0ad9c4c911db708d4467987c7fe0", "10215": "0216c382873fad07014f9acddda67e774c3a1c74", "10226": "3d55351e27809534dedde46e10df0e499f586137", "10242": "bc791566091507b286d02ee5936a414373086b54", "10245": "214a4b1e8fc5da6dc42211572454f31671ac1af2", "10250": "2e04ddd51941d01ea95835a7aa957ff9785fb9e9", "10255": "24161dfd5d628847dbf91d1c9b12166a6e62d980", "10270": "fa15226dde16f66a7c732ae31fed8dbee1b23e3a", "10275": "233d476f74f09b119ee7ac4765efe9b751d0a134", "10284": "5473db5678702d2942478280cc3b51540d6edaf6", "10308": "fb76610f4a4cbf7305d54bdbfa81eaac8377b392", "10324": "7cca539cb95f2556f99658f6fb97338979459851", "10336": "795a0c08151859b5e0e5ec9d99ff44c2dcf668d0", "10346": "804ea24742bddd9267d0b0a2148779e9ef420b91", "10355": "524839d1ccb48835019edb898bdcc648eeaadb7b", "10362": "979d14b4846e4d3dbf3a49a7ec32ab50422e917e", "10365": "e485a0117aad693d96a6d520d0a9370f254e1430", "10378": "d0b5beb2fb80a8a17ad71a9e843cc838e075c79f", "10387": "23157aebce218444edc83b525dfb2c7fc8637598", "10402": "dd0d4b532c49b73bf77224f38cd3c6101c819068", "10442": "5643116d5b8bd2622c13879d09b07d9952714c5b", "10458": "9eea12b9b0813ac3c7e269c4c74b54d5240b7f67", "10476": "e4bd6c12f05823750ada4f8056879d6406831347", "10494": "3b8d775505186f70994b40512be7e94c9eb7bcc1", "10578": "309ba7280ae3de3b9ea9426424ae08001d1488e3", "10587": "a8ad2d66705c930431de5b61f38959725935c311", "10598": "7fd51553d41359e17a111c9d02497f1ee7d12f72", "10606": "e992f1202b571d5fb9de729bf71ccb968db786f7", "10613": "134585fb5cc5604f046ec30d1e9d622588d82e89", "10631": "f649e6adf2072d5bdec0fb12402eb2e3f379bdf0", "10641": "0ce0a71364be6e301c3d4379d4e0b0e601d690bb", "10646": "2c74a4f86797e707a8f205c6482233fb5aa34dd8", "10655": "e1f52ffcf9811bb7d5046af47c48a2291bfd50b8", "10683": "79b9368de9341b893378ddb20651a5e5c7ba5597", "10684": "bc72c6d4cb430eb8ec8a83323a996fc87b5297c7", "10697": "23d31f98a19194ba2eb0c415dab3fb55db509486", "10703": "754fc18db2325a598650a6781df35529383b5a70", "10706": "9d3b1c3c39644289e877088db842fb29c44cc4e3", "10716": "d0f8f35f7fea4d8f2aef9d06a5117ce8bcf81bb1", "10725": "9ec6ebcbc641379826ad46913cf33f3b4c3f5cf1", "10741": "0fd8cf360725ffdc5cd177de60ec78ad79833ac6", "10764": "ded5a577fbaa69443dbbf1a3990cdf17dd167a50", "10786": "0270a8e0cd27bcfc08fe54d6d4a60e44640b02a0", "10796": "7c5b44eac083c76ac7464d4c334d04351c067643", "10809": "e5714a9d747ea772685161043d37d5c99972da99", "10823": "b2407961d4bf1159143d31ad6077fe8c2a6f984d", "10830": "212c306c0a1c55638cb77a25f31be08a2214e953", "10851": "6a51492f831d8c035cf45749bfe3f3513091d4a0", "10873": "6877eac95342e99e52728148c674589cd92dd193", "10899": "1cd386dde15aad7bf194f94d17e1d80bdcb803f4", "10901": "d4c5880e742c06cba28751aadf987ade94ac30e8", "10926": "33a403757fedfc68bd2cbf97af9c58d6d28fc5c7", "10945": "41bf72baf60a54482bbd8353ac8e697f7f440860", "10953": "3fb587769864a5437996f114a5041ecd4187cc52", "10975": "e4964ba1170b384d0ea59ee3785c8848f55a884b", "10992": "985678530e57b2f8faf9f06755e5ccbf195d46cd", "11023": "4c423127dc2f9e51278ae2601432f4116352cf4a", "11048": "0419e4e9d3dc8dfc8600021d39a905a9b39030bf", "11050": "a6462b0f5fa173e7ced738604eacea6e0c2bf266", "11054": "2e90d3aaf532522e25aeb253bed4965bb8d9449d", "11077": "59c99b2cf56984dd98ff189083ce90720976c1f1", "11097": "3c7ad7c8f9d093bab2860bb2664986007a07c26c", "11123": "5f4913d9246c61856a72284b8dead52f3ad97bd3", "11129": "96aaa75c85d5c8f905fa79f6386478b3f8d3137b", "11141": "2f3c3fade3fc56320563228c501f94b078c7d446", "11181": "0bb70d240841225b785c70cdcd6bb7575b1d33ca", "11194": "70b9e343121cf53b08f34ad9bc7d27e9f9517734", "11222": "7b1f1fce48ade4865b5c4d0cba743bca779c6002", "11239": "6c3319cc03591e4cf710c645b22fa2de838e2e07", "11264": "a1bc6781da34a78ea3548d68c03d828929460333", "11272": "1472d971ed90531e9ff45c3310f35bc01d6c8eb3", "11295": "4a8a2211d0a6b6efc5ec4d4699976474d28a3ab4", "11328": "3e6775adeae3bc8bef188c3265a5f70f9a875f14", "11330": "aaa42e5ae83d88e5671c6de600f0648eced99670", "11339": "1f01c1e391cc7d01feba405e40584e2f6c456fae", "11374": "831d903c1965b9a760987ed87b052845d7a7b149", "11376": "65b464521d84f4b08f8cf599885f6af68bab6bfa", "11390": "8c4b3d60d5980748ba8a673be50aa140eb57cb63", "11408": "b25ce8c41584e6a95e28238b2617f1f1982a9534", "11444": "256da2638404a39d7e2d4b4830e219b9c4a0de88", "11447": "669af80b3768d6569dc7e3b72a1584928851a286", "11480": "96e57ec85ccc50548c86a5cf2321498663a77f4c", "11545": "f5d16bc424af09bc0b4c0879801cbe7d88bf4807", "11574": "75cfa696d0f0c280d26c439d2c1a09efea229ca0", "11581": "a1091ecbf3476287c5c29a94a4bd27f4adb42149", "11596": "cf03cf988b1f6d47ed54c6231f1aa88d25ceeb41", "11655": "82a705cda10aef3c9c24228b371365ee2d0cb81a", "11670": "f3b84024d603847db2ea31a139c6806466cb0d59", "11690": "924ee9e7f23f76b9d2b530cebc448c3d9fff0d79", "11706": "05a2ea09fe4b4c0bcbd48d1500bd26ed7ee427eb", "11732": "91a97cd2a6350aa9222c945e25711e1ae87e6f07", "11747": "c89445ea5111d9c565452fc1c69fed00814291da", "11771": "d0bed316f9389bdaa48ff361666f38992d8e9180", "11789": "ead95e04db897ea61e6d6faa4edc6e0c39f9f06f", "11800": "58879c82c7678198a76052b00566c5d09bf8a9a4", "11850": "6d8c046479851ff16474b5f53628b047a82b83ce", "11861": "03862934e4233a376e8e8e613c7fa5f7eec79003", "11881": "4127bd137723ad5bbd268cc506392a34101ba7a8", "11902": "ed12e8e96de5d19fe0b7c13c385cdc5a6c87447f", "11905": "a5aca9cafda6e3f21f4a6ce596243c35c3b52f42", "11926": "2b882d2f1559bec0b419ad261704e3ac3322eaab", "11957": "959081ee329f49cb6f6fc04a4f420da056500a02", "11992": "bc83ce7cc838dac36946574950e807d788cf7af7", "12001": "d5547da8e0bbe4d05f1be35eb0226f6662452733", "12052": "8bdc3e039860c098d0c24f2e5b74ecee08285266", "12073": "5d9f320ed02a58d0cf35ca60df484da5c982e36f", "12089": "dfb31da0e3250f5581f014cd0db2c2761b3a30da", "12108": "8478e9a6168c4a3e6b0720be07c6ad6c6dae5fe6", "12132": "24e465d51b70fd1c220319084c9aac8bac98af1a", "12152": "c8f2890c08d9f9c12c64027255864af86582f508", "12198": "4f233b061f5dfd8cadbe61fd72339235f0f410e9", "12225": "76072c889203023af4f56fa3885e5b6a27747602", "12227": "53cf744cbc4d3b6fd70ad6f1669596d61578d82b", "12245": "8d042b3fa297f883ba8b2975a1c61a0439345b34", "12262": "02292604535629ebc8b2cc6ca1fe061dbdd9977c", "12281": "c17756f1b7605403e8e3f025c9d3568517941529", "12283": "efd426c64b75afcfa14a5552d908ed4c3bbf0e8e", "12306": "b072d22f1344f062fc84ca44e0c540873669b6f7", "12339": "c38f385675c0a6481de776acd5de7182eca77ab8", "12372": "97e27851942c9722017a636df2fbd78aedda8b08", "12395": "0afb069ba6b808a5e2539780a1a6b5eb246441dd", "12414": "08db55996e30b5ddb5c429689d0890618f9c8f39", "12420": "18d3bc5cad6413e5dd41043356b4d26bd5510d25", "12430": "7800bbcb07b5a7be81d8c32b52a89f231381951b", "12445": "c4baa51081f7ba38eea6ccb21a9e9fe89b71c934", "12480": "e090ada72f0d9048d08a1008368b0e25321f83b1", "12487": "bf76f86114c825a051b94bd652f8d42da6551fd9", "12495": "59b63d563aa71a37b7b2e52e3adf517b26b90cd4", "12505": "fa5ec1b58e93de2f087d9cd495a241af04d5200a", "12546": "5be34ac48dcad0f671c3e79a0e28bdcf9dfdc175", "12629": "0c120dec50c7d70798497489baca79c4c5d96834", "12912": "81d8c351579af9ed1196805eab8e36ca61ca2468", "13248": "2c4bceafae1206cee3dc9802dafe56491fdd083e", "13398": "521c5f4a611e909c160accbd122e7449282151ee", "13410": "7c9bcfbcf66b390c82633ec4c7ba554d34e8d40f", "13422": "352bd0283754486f95a124b9e9aa5229afeeb27b", "13465": "0b707d19f998d006c44f347a1d4edced8c877ac7", "13482": "634f7c7389be8626c95cb22350b4e444274cceb1", "13518": "3d2067873bd391477dec495c62d57d520d335e7c", "13524": "6f2199c26c4e602feb6ef293c6b35e50353f6e8a", "13550": "9d60f052783a25ab43a0e2203a0c1520bbe3b7e9", "13564": "d90a56c5bc9d8d81c9378c423f7927aa5ec1ed30", "13588": "7e681e2b4eee4721e875c3d899a9144f1d48d678", "13608": "57d06db6a6da0cf5a304639df29163dd8e2113fb", "13635": "3dc2fb31df994df12a4377812e3ead615409dcfd", "13667": "a1e64c7715723b67928a9423e714689d9ee06e83", "13731": "a404cbd13ed36ff7bdd923f1b25aeeb6f6aade7b", "13763": "788ab6e7b44af67af6592a205bac0ca922efa0e6", "13787": "c2ca937f4b24bb3b2428809b3307cdb577caf0ab", "13790": "abc53f52c9ab4a930e612413385569c0c631f251", "13809": "c732253e559d8020dbd3dc1f165f0924f97a8a8d", "13810": "48e81e3dc9f3cd14c0b9ccaa3b9407c98d9ec4a2", "13836": "bf8581174460005f4d4ecb1a0b56cbf665cd59ce", "13988": "5e28bb9a316f394282b40c8a56b285e85d987b77", "14028": "4df9b99bf837500dc5001a175628400d8f9a053d", "14032": "f74c32c2186f6abcc67de03f302ef80fc741d388", "14083": "79e55a4090bb6f53ef9fea01d4d9323927c78563", "14188": "f1f3fe50295bbd5cb749e4df7cf28dc6af17abe3", "14205": "02c56a2fea4bfb094b220609d0a34042d47340a6", "14235": "2efdfade290b5b3680685f55d6a62f671b3038c0", "14262": "f588f2084217e8c028857c65c72127cc153b6b0e", "14280": "19984286f62bb07e2ad42a804c08e980db2e6d2d", "14291": "79af68d8476c1d75512d570ff8e9c5e20e5af021", "14304": "65316abf23b182afafd67eaffd1a629746e6b9c0", "14317": "d588ec18f8ff4ba87a0355cde102e5b11e55511a", "14333": "695917e345dc28af65d7654e66d07aedb9494d93", "14339": "3f7df5fb2cfeddb9ecee6581dac8c70efec06205", "14359": "e05aa6bb44c1ecaeddec0efa20e99f56f803ab68", "14373": "61e04b3bd0f5324cb3292c02b08ef788dfcb86b7", "14399": "525db23c9822fe774ebf6804ddce2d04f0ce61a0", "14422": "35fd252be7b7ce59e24689d5e0bbbb0a760f6e23", "14451": "8662763cc81493ffb05d649627c244a4170cc2f0", "14468": "f0cc9847003f7b362b0bc703b4f2b129c98c91f5", "14505": "a2a41847883c5b8e026e939af097fa6687d00beb", "14531": "b6d4f3f09fae887d142e52913219595b11098c3d", "14561": "f4dfbe71765fa32bc805f30da1ea9ed27acb6c8b", "14594": "e7bd82f9b77045601d938cc67b707312b3d3a407", "15124": "7eb5879c264e26b02a71b0ced8ef11a5f092e451", "15135": "6699f31fb751857a1368e5e7b16d715f44c660ff", "15193": "d67b0094e7d35ffc8cca1480a9d60fc2bf1bcdb2", "15226": "d02a78b6edb262ee4a582b35f4c11eba22e08fd8", "15256": "535c03410828964dc9844117524c899cb07a17b8", "15260": "774d56d453c54f22a1a95ad81b33f444734b6363", "15291": "bd5e240a26927800fd7338da294915be6ca7966f", "15306": "eb50d9009ee4678fdd18fbfe95a1c82aac72ec5c", "15353": "8429903702566630e1f1e6b8976c308e0e6fc949", "15366": "320b2e5e669b6041d2b6212db932fc0b8cf0cb68", "15374": "0a0117f174173b1b78de4ee7a1b2fd7de344a1d4", "15386": "876c5129ead5d49b8c84ff78b97b155a4495f5f5", "15407": "00b1698183eacfeb522335bbaa3ed1f946332866", "15451": "0482121fb583a7f196dca6b771dbb4f3b95c98ec", "15472": "618b481f3c81d6519e0ed1b32a1b88c64eaaea8f", "15525": "d37a8f23eb442cdc15f51ecdfc1680619950470b", "15554": "33d21874fbc39fd81ff89a8cc5638f6a81f8c31d", "15608": "bfddc832d9fbf5ce35443adaefb6fae6e5f762be", "15616": "6fbd3063c65886c40673c72baf08abb3a3bc6941", "15619": "fbcf22bea430e03420e82ffab46539ce51b1522f", "15629": "d88b7ddcfa6f563100d92c11cdc97b50f261629b", "15648": "b917acf87da50df3809f6fec1ed4764162bdb42c", "15666": "1a38b25b3e935bffcd23190f1a19da282a2e06b6", "15674": "97ca773b560b9b1f8a301c19a854ce5da79c87d2", "15688": "6851496ff1a9cc3ec1573033cec28a2353857fbf", "15694": "2ee8da23ee24e9e946a60b0dd9e64070b1244552", "15749": "640041e6fbfa27995f10851405712b3959922a91", "15779": "c86f8fe676d40b77279aab26a01049266627b49c", "15793": "ebacf496a4322b084b7c4058599755b45008283b", "15833": "e802b112a62c5998932490501b98b59eedd0a2ff", "15847": "9c85dd7f2bcd2c5c18d5ade9cbfbca0e9ba7c369", "15861": "32fad0048f785a9e0a597f5e9545a3f795c00bfb", "15905": "4ad2853ae8bd8de87c305609810ea851f7b50f17", "15921": "e0bec2b7c5468e1b448d04bedf42aa8a66d67516", "15923": "a129e02413bf9c2238f21730b977658b85fab3f3", "15929": "903323efca7fef8f630924d114ce70dcf8a92363"}, "revision_to_date": {"3608": 1570093702000, "4954": 1582740136000, "5277": 1585676155000, "5978": 1591033902000, "6424": 1593631560000, "6787": 1599491896000, "7278": 1606088199000, "7341": 1606841582000, "8395": 1617010666000, "8666": 1623191999000, "8919": 1627560622000, "9168": 1629941483000, "9197": 1630512171000, "9328": 1632146150000, "9369": 1633361655000, "9449": 1635177742000, "9483": 1635717739000, "9674": 1636835649000, "9854": 1638296811000, "9953": 1639518516000, "10003": 1640969974000, "10180": 1643639908000, "10215": 1643925156000, "10226": 1644089700000, "10242": 1644349796000, "10245": 1644502545000, "10250": 1645566656000, "10255": 1645740856000, "10270": 1646061111000, "10275": 1646125361000, "10284": 1646247845000, "10308": 1646755470000, "10324": 1646873103000, "10336": 1646931876000, "10346": 1647006111000, "10355": 1647179848000, "10362": 1647266364000, "10365": 1647343999000, "10378": 1647632702000, "10387": 1647978831000, "10402": 1648568226000, "10442": 1649954862000, "10458": 1650485426000, "10476": 1651062961000, "10494": 1651510060000, "10578": 1652061084000, "10587": 1652279780000, "10598": 1652430863000, "10606": 1652807866000, "10613": 1652970416000, "10631": 1653420634000, "10641": 1653606749000, "10646": 1653677328000, "10655": 1653925577000, "10683": 1654598015000, "10684": 1654603577000, "10697": 1654719862000, "10703": 1654785090000, "10706": 1655145895000, "10716": 1655308368000, "10725": 1655400342000, "10741": 1655915507000, "10764": 1656091547000, "10786": 1656451570000, "10796": 1656521917000, "10809": 1656608292000, "10823": 1656701477000, "10830": 1656798203000, "10851": 1657123170000, "10873": 1657225826000, "10899": 1657573160000, "10901": 1657623357000, "10926": 1658075891000, "10945": 1658332357000, "10953": 1658425801000, "10975": 1658766316000, "10992": 1658857735000, "11023": 1658956303000, "11048": 1659108567000, "11050": 1659191438000, "11054": 1659368325000, "11077": 1659446562000, "11097": 1659547593000, "11123": 1659695165000, "11129": 1659710861000, "11141": 1659980747000, "11181": 1660557214000, "11194": 1660647179000, "11222": 1660759877000, "11239": 1660840017000, "11264": 1660928419000, "11272": 1661175501000, "11295": 1661324838000, "11328": 1661434418000, "11330": 1661528818000, "11339": 1661789290000, "11374": 1662427083000, "11376": 1662461732000, "11390": 1662644216000, "11408": 1662739142000, "11444": 1663034289000, "11447": 1663058369000, "11480": 1663210216000, "11545": 1663792732000, "11574": 1664303882000, "11581": 1664362767000, "11596": 1664645121000, "11655": 1665091986000, "11670": 1665415649000, "11690": 1665511852000, "11706": 1665583108000, "11732": 1665693613000, "11747": 1666064378000, "11771": 1666196938000, "11789": 1666282558000, "11800": 1666359781000, "11850": 1666731122000, "11861": 1666792940000, "11881": 1666900451000, "11902": 1666983669000, "11905": 1667161799000, "11926": 1667406203000, "11957": 1667550738000, "11992": 1667831411000, "12001": 1667924799000, "12052": 1668109682000, "12073": 1668391656000, "12089": 1668609568000, "12108": 1668808583000, "12132": 1668963744000, "12152": 1669037980000, "12198": 1669483921000, "12225": 1669686056000, "12227": 1669714349000, "12245": 1669835266000, "12262": 1669985783000, "12281": 1670190455000, "12283": 1670196710000, "12306": 1670275209000, "12339": 1670642177000, "12372": 1670889796000, "12395": 1670962197000, "12414": 1671037775000, "12420": 1671045553000, "12430": 1671117900000, "12445": 1671641451000, "12480": 1672263701000, "12487": 1672555168000, "12495": 1672854390000, "12505": 1673015690000, "12546": 1673447890000, "12629": 1675165196000, "12912": 1677610075000, "13248": 1680343857000, "13398": 1682866089000, "13410": 1683042293000, "13422": 1683059467000, "13465": 1683303528000, "13482": 1683648919000, "13518": 1684334596000, "13524": 1684418094000, "13550": 1684526433000, "13564": 1684774009000, "13588": 1684940884000, "13608": 1685108870000, "13635": 1685433937000, "13667": 1685646133000, "13731": 1686360350000, "13763": 1686704606000, "13787": 1686955750000, "13790": 1687016459000, "13809": 1687176960000, "13810": 1687183481000, "13836": 1687362082000, "13988": 1688049899000, "14028": 1688429870000, "14032": 1688481408000, "14083": 1688593402000, "14188": 1689722927000, "14205": 1689775269000, "14235": 1689885387000, "14262": 1689992005000, "14280": 1690145351000, "14291": 1690228907000, "14304": 1690294402000, "14317": 1690377260000, "14333": 1690503609000, "14339": 1690558930000, "14359": 1690824060000, "14373": 1690925180000, "14399": 1691013967000, "14422": 1691091366000, "14451": 1691180718000, "14468": 1691267472000, "14505": 1691444079000, "14531": 1691537465000, "14561": 1691636679000, "14594": 1691685250000, "15124": 1696094703000, "15135": 1696247241000, "15193": 1696346957000, "15226": 1696518676000, "15256": 1696775347000, "15260": 1696836838000, "15291": 1696955830000, "15306": 1697045834000, "15353": 1697485759000, "15366": 1697529796000, "15374": 1697566177000, "15386": 1697675484000, "15407": 1697834357000, "15451": 1698133894000, "15472": 1698284664000, "15525": 1698764718000, "15554": 1699360670000, "15608": 1699897427000, "15616": 1699990556000, "15619": 1699991573000, "15629": 1700069082000, "15648": 1700168901000, "15666": 1700245911000, "15674": 1700493534000, "15688": 1700513615000, "15694": 1700668090000, "15749": 1700938898000, "15779": 1701113119000, "15793": 1701185911000, "15833": 1701743107000, "15847": 1701796077000, "15861": 1701864526000, "15905": 1702056363000, "15921": 1702341808000, "15923": 1702410047000, "15929": 1702548789000}, "params": {"machine": ["GitHubRunner"], "python": ["3.8"], "numpy": [""], "casadi": [""], "wget": [""], "cmake": [""], "anytree": [""], "autograd": [""], "scikit-fem": [""], "imageio": [""], "pybtex": [""], "sympy": [""], "bpx": [""], "tqdm": [""], "matplotlib": [""], "env-LD_LIBRARY_PATH": ["/home/runner/.local/lib"], "branch": ["develop"]}, "graph_param_list": [{"machine": "GitHubRunner", "python": "3.8", "numpy": "", "casadi": "", "wget": "", "cmake": "", "anytree": "", "autograd": "", "scikit-fem": "", "imageio": "", "pybtex": "", "sympy": "", "bpx": "", "tqdm": "", "matplotlib": "", "env-LD_LIBRARY_PATH": "/home/runner/.local/lib", "branch": "develop"}], "benchmarks": {"different_model_options.TimeBuildModelLithiumPlating.time_setup_model": {"code": "class TimeBuildModelLithiumPlating:\n    def time_setup_model(self, model, params):\n        build_model(\"OKane2022\", model, \"lithium plating\", params)\n\n    def setup(self, _model, _params):\n        set_random_seed()", "min_run_count": 2, "name": "different_model_options.TimeBuildModelLithiumPlating.time_setup_model", "number": 0, "param_names": ["model", "model option"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'none'", "'irreversible'", "'reversible'", "'partially reversible'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b7715f9cd1f28f249a74a4036dff5452cde2f077c92024efae0ebb5545c3edc0", "warmup_time": -1}, "different_model_options.TimeBuildModelLossActiveMaterial.time_setup_model": {"code": "class TimeBuildModelLossActiveMaterial:\n    def time_setup_model(self, model, params):\n        build_model(\"Ai2020\", model, \"loss of active material\", params)\n\n    def setup(self, _model, _params):\n        set_random_seed()", "min_run_count": 2, "name": "different_model_options.TimeBuildModelLossActiveMaterial.time_setup_model", "number": 0, "param_names": ["model", "model option"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'none'", "'stress-driven'", "'reaction-driven'", "'stress and reaction-driven'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "478c22dec000f10359afc36541c1e78f5e93eaaddf53c542d8b86433b7bb0faa", "warmup_time": -1}, "different_model_options.TimeBuildModelParticle.time_setup_model": {"code": "class TimeBuildModelParticle:\n    def time_setup_model(self, model, params):\n        build_model(\"Marquis2019\", model, \"particle\", params)\n\n    def setup(self, _model, _params):\n        set_random_seed()", "min_run_count": 2, "name": "different_model_options.TimeBuildModelParticle.time_setup_model", "number": 0, "param_names": ["model", "model option"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'Fickian diffusion'", "'uniform profile'", "'quadratic profile'", "'quartic profile'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "7a2b728d79432d8ed22c8c8680ee758da0ceffe378a6235c09e3614caf624ba6", "warmup_time": -1}, "different_model_options.TimeBuildModelSEI.time_setup_model": {"code": "class TimeBuildModelSEI:\n    def time_setup_model(self, model, params):\n        build_model(\"Marquis2019\", model, \"SEI\", params)\n\n    def setup(self, _model, _params):\n        set_random_seed()", "min_run_count": 2, "name": "different_model_options.TimeBuildModelSEI.time_setup_model", "number": 0, "param_names": ["model", "model option"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'none'", "'constant'", "'reaction limited'", "'solvent-diffusion limited'", "'electron-migration limited'", "'interstitial-diffusion limited'", "'ec reaction limited'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "72052d17c62d75ef9abff93a57e2fe2b8776f153d13317ba41c9304374cf3241", "warmup_time": -1}, "different_model_options.TimeBuildModelSurfaceForm.time_setup_model": {"code": "class TimeBuildModelSurfaceForm:\n    def time_setup_model(self, model, params):\n        build_model(\"Marquis2019\", model, \"surface form\", params)\n\n    def setup(self, _model, _params):\n        set_random_seed()", "min_run_count": 2, "name": "different_model_options.TimeBuildModelSurfaceForm.time_setup_model", "number": 0, "param_names": ["model", "model option"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'false'", "'differential'", "'algebraic'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "0ae12c41f1ed5675d959bbc049a400985cf3ede740ee73c11075d7aa10f34e49", "warmup_time": -1}, "different_model_options.TimeBuildModelThermal.time_setup_model": {"code": "class TimeBuildModelThermal:\n    def time_setup_model(self, model, params):\n        build_model(\"Marquis2019\", model, \"thermal\", params)\n\n    def setup(self, _model, _params):\n        set_random_seed()", "min_run_count": 2, "name": "different_model_options.TimeBuildModelThermal.time_setup_model", "number": 0, "param_names": ["model", "model option"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'isothermal'", "'lumped'", "'x-full'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "a350e87e4e8a8f35aeb9951c78518a60da6177951f7d81d09f3d3088ec055cfd", "warmup_time": -1}, "different_model_options.TimeSolveLithiumPlating.time_solve_model": {"code": "class TimeSolveLithiumPlating:\n    def time_solve_model(self, _model, _params, _solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, model, params, solver_class):\n        set_random_seed()\n        SolveModel.solve_setup(\n            self, \"OKane2022\", model, \"lithium plating\", params, solver_class\n        )", "min_run_count": 2, "name": "different_model_options.TimeSolveLithiumPlating.time_solve_model", "number": 0, "param_names": ["model", "model option", "solver class"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'none'", "'irreversible'", "'reversible'", "'partially reversible'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b1d66b1656476391fd4f4a356b350bff995917103286317dffc403f2b8a90fbe", "warmup_time": -1}, "different_model_options.TimeSolveLossActiveMaterial.time_solve_model": {"code": "class TimeSolveLossActiveMaterial:\n    def time_solve_model(self, _model, _params, _solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, model, params, solver_class):\n        set_random_seed()\n        SolveModel.solve_setup(\n            self, \"Ai2020\", model, \"loss of active material\", params, solver_class\n        )", "min_run_count": 2, "name": "different_model_options.TimeSolveLossActiveMaterial.time_solve_model", "number": 0, "param_names": ["model", "model option", "solver class"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'none'", "'stress-driven'", "'reaction-driven'", "'stress and reaction-driven'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "d5e240fe84c4acc6966e4a3c4fd3b541659eb242ea36508a92c57a0ed958ceb7", "warmup_time": -1}, "different_model_options.TimeSolveParticle.time_solve_model": {"code": "class TimeSolveParticle:\n    def time_solve_model(self, _model, _params, _solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, model, params, solver_class):\n        set_random_seed()\n        SolveModel.solve_setup(\n            self, \"Marquis2019\", model, \"particle\", params, solver_class\n        )", "min_run_count": 2, "name": "different_model_options.TimeSolveParticle.time_solve_model", "number": 0, "param_names": ["model", "model option", "solver class"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'Fickian diffusion'", "'uniform profile'", "'quadratic profile'", "'quartic profile'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "0fb24c2046b35533f49c825e1f5dbc32c30266f30c6ffc64504048df0f6182f7", "warmup_time": -1}, "different_model_options.TimeSolveSEI.time_solve_model": {"code": "class TimeSolveSEI:\n    def time_solve_model(self, _model, _params, _solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, model, params, solver_class):\n        set_random_seed()\n        SolveModel.solve_setup(self, \"Marquis2019\", model, \"SEI\", params, solver_class)", "min_run_count": 2, "name": "different_model_options.TimeSolveSEI.time_solve_model", "number": 0, "param_names": ["model", "model option", "solver class"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'none'", "'constant'", "'reaction limited'", "'solvent-diffusion limited'", "'electron-migration limited'", "'interstitial-diffusion limited'", "'ec reaction limited'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "53dd91bc8ea837141f3ff3ec6ae6fc8310b0ebfae08e6bbd8a1f692efb7d2f57", "warmup_time": -1}, "different_model_options.TimeSolveSurfaceForm.time_solve_model": {"code": "class TimeSolveSurfaceForm:\n    def time_solve_model(self, _model, _params, _solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, model, params, solver_class):\n        set_random_seed()\n        if (model, params, solver_class) == (\n            pybamm.lithium_ion.SPM,\n            \"differential\",\n            pybamm.IDAKLUSolver,\n        ):\n            raise NotImplementedError\n        SolveModel.solve_setup(\n            self, \"Marquis2019\", model, \"surface form\", params, solver_class\n        )", "min_run_count": 2, "name": "different_model_options.TimeSolveSurfaceForm.time_solve_model", "number": 0, "param_names": ["model", "model option", "solver class"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'false'", "'differential'", "'algebraic'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b025abdf6ccd9f47388fd29f0bfc0fc5490bc48eb9c277ba6172b8064339cd15", "warmup_time": -1}, "different_model_options.TimeSolveThermal.time_solve_model": {"code": "class TimeSolveThermal:\n    def time_solve_model(self, _model, _params, _solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, model, params, solver_class):\n        set_random_seed()\n        SolveModel.solve_setup(\n            self, \"Marquis2019\", model, \"thermal\", params, solver_class\n        )", "min_run_count": 2, "name": "different_model_options.TimeSolveThermal.time_solve_model", "number": 0, "param_names": ["model", "model option", "solver class"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'isothermal'", "'lumped'", "'x-full'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b8015ca16fbe5a13c5d7b34926d92538382b9575c674f2ef78d923e8e603f5cb", "warmup_time": -1}, "memory_sims.MemDFNSimulationCCCV.mem_setup_DFN_simulationCCCV": {"code": "class MemDFNSimulationCCCV:\n    def mem_setup_DFN_simulationCCCV(self, params):\n        self.param = pybamm.ParameterValues(params)\n        self.model = pybamm.lithium_ion.DFN()\n        exp = pybamm.Experiment(\n            [\n                \"Discharge at C/5 for 10 hours or until 3.3 V\",\n                \"Rest for 1 hour\",\n                \"Charge at 1 A until 4.1 V\",\n                \"Hold at 4.1 V until 10 mA\",\n                \"Rest for 1 hour\",\n            ]\n        )\n        self.sim = pybamm.Simulation(\n            self.model, parameter_values=self.param, experiment=exp\n        )\n        return self.sim\n\n    def setup(self, _params):\n        set_random_seed()", "name": "memory_sims.MemDFNSimulationCCCV.mem_setup_DFN_simulationCCCV", "param_names": ["parameter"], "params": [["'Marquis2019'", "'Chen2020'"]], "type": "memory", "unit": "bytes", "version": "51ef613d1be3b3c97e5cff911f9a71ebfec58bb3741293e2b387b6aec0c55d88"}, "memory_sims.MemDFNSimulationGITT.mem_setup_DFN_simulationGITT": {"code": "class MemDFNSimulationGITT:\n    def mem_setup_DFN_simulationGITT(self, params):\n        self.param = pybamm.ParameterValues(params)\n        self.model = pybamm.lithium_ion.SPM()\n        exp = pybamm.Experiment(\n            [(\"Discharge at C/20 for 1 hour\", \"Rest for 1 hour\")] * 20\n        )\n        self.sim = pybamm.Simulation(\n            self.model, parameter_values=self.param, experiment=exp\n        )\n        return self.sim\n\n    def setup(self, _params):\n        set_random_seed()", "name": "memory_sims.MemDFNSimulationGITT.mem_setup_DFN_simulationGITT", "param_names": ["parameter"], "params": [["'Marquis2019'", "'Chen2020'"]], "type": "memory", "unit": "bytes", "version": "d4b526c693f63c0dca2afa82bc58c24d52b7884ae618e298aff74e44864d84e4"}, "memory_sims.MemSPMSimulationCCCV.mem_setup_SPM_simulationCCCV": {"code": "class MemSPMSimulationCCCV:\n    def mem_setup_SPM_simulationCCCV(self, params):\n        self.param = pybamm.ParameterValues(params)\n        self.model = pybamm.lithium_ion.SPM()\n        exp = pybamm.Experiment(\n            [\n                \"Discharge at C/5 for 10 hours or until 3.3 V\",\n                \"Rest for 1 hour\",\n                \"Charge at 1 A until 4.1 V\",\n                \"Hold at 4.1 V until 10 mA\",\n                \"Rest for 1 hour\",\n            ]\n        )\n        self.sim = pybamm.Simulation(\n            self.model, parameter_values=self.param, experiment=exp\n        )\n        return self.sim\n\n    def setup(self, _params):\n        set_random_seed()", "name": "memory_sims.MemSPMSimulationCCCV.mem_setup_SPM_simulationCCCV", "param_names": ["parameter"], "params": [["'Marquis2019'", "'Chen2020'"]], "type": "memory", "unit": "bytes", "version": "29109fbfa71fad4a6f5d5b2f57bb2c9d364602f218e44f5f537529aae441a717"}, "memory_sims.MemSPMSimulationGITT.mem_setup_SPM_simulationGITT": {"code": "class MemSPMSimulationGITT:\n    def mem_setup_SPM_simulationGITT(self, params):\n        self.param = pybamm.ParameterValues(params)\n        self.model = pybamm.lithium_ion.SPM()\n        exp = pybamm.Experiment(\n            [(\"Discharge at C/20 for 1 hour\", \"Rest for 1 hour\")] * 20\n        )\n        self.sim = pybamm.Simulation(\n            self.model, parameter_values=self.param, experiment=exp\n        )\n        return self.sim\n\n    def setup(self, _params):\n        set_random_seed()", "name": "memory_sims.MemSPMSimulationGITT.mem_setup_SPM_simulationGITT", "param_names": ["parameter"], "params": [["'Marquis2019'", "'Chen2020'"]], "type": "memory", "unit": "bytes", "version": "c00f20a28b027b21fcddb41e38f4b6414026233b5484c1bc7a1ad2810fc0475f"}, "memory_unit_benchmarks.MemCreateExpression.mem_create_expression": {"code": "class MemCreateExpression:\n    def mem_create_expression(self):\n        self.R = pybamm.Parameter(\"Particle radius [m]\")\n        D = pybamm.Parameter(\"Diffusion coefficient [m2.s-1]\")\n        j = pybamm.Parameter(\"Interfacial current density [A.m-2]\")\n        F = pybamm.Parameter(\"Faraday constant [C.mol-1]\")\n        c0 = pybamm.Parameter(\"Initial concentration [mol.m-3]\")\n        self.model = pybamm.BaseModel()\n    \n        c = pybamm.Variable(\"Concentration [mol.m-3]\", domain=\"negative particle\")\n        N = -D * pybamm.grad(c)\n        dcdt = -pybamm.div(N)\n        self.model.rhs = {c: dcdt}\n    \n        lbc = pybamm.Scalar(0)\n        rbc = -j / F / D\n        self.model.boundary_conditions = {\n            c: {\"left\": (lbc, \"Neumann\"), \"right\": (rbc, \"Neumann\")}\n        }\n    \n        self.model.initial_conditions = {c: c0}\n        self.model.variables = {\n            \"Concentration [mol.m-3]\": c,\n            \"Surface concentration [mol.m-3]\": pybamm.surf(c),\n            \"Flux [mol.m-2.s-1]\": N,\n        }\n        return self.model\n\n    def setup(self):\n        set_random_seed()", "name": "memory_unit_benchmarks.MemCreateExpression.mem_create_expression", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "3d6830c6c8132d74fbf54e206a2f784c514c86ad079aac662a24cb151775927f"}, "memory_unit_benchmarks.MemDiscretiseModel.mem_create_expression": {"code": "class MemCreateExpression:\n    def mem_create_expression(self):\n        self.R = pybamm.Parameter(\"Particle radius [m]\")\n        D = pybamm.Parameter(\"Diffusion coefficient [m2.s-1]\")\n        j = pybamm.Parameter(\"Interfacial current density [A.m-2]\")\n        F = pybamm.Parameter(\"Faraday constant [C.mol-1]\")\n        c0 = pybamm.Parameter(\"Initial concentration [mol.m-3]\")\n        self.model = pybamm.BaseModel()\n    \n        c = pybamm.Variable(\"Concentration [mol.m-3]\", domain=\"negative particle\")\n        N = -D * pybamm.grad(c)\n        dcdt = -pybamm.div(N)\n        self.model.rhs = {c: dcdt}\n    \n        lbc = pybamm.Scalar(0)\n        rbc = -j / F / D\n        self.model.boundary_conditions = {\n            c: {\"left\": (lbc, \"Neumann\"), \"right\": (rbc, \"Neumann\")}\n        }\n    \n        self.model.initial_conditions = {c: c0}\n        self.model.variables = {\n            \"Concentration [mol.m-3]\": c,\n            \"Surface concentration [mol.m-3]\": pybamm.surf(c),\n            \"Flux [mol.m-2.s-1]\": N,\n        }\n        return self.model\n\nclass MemDiscretiseModel:\n    def setup(self):\n        set_random_seed()\n        MemCreateExpression.mem_create_expression(self)\n        MemParameteriseModel.mem_parameterise(self)", "name": "memory_unit_benchmarks.MemDiscretiseModel.mem_create_expression", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "1e1265e6812795c6b4638a8861b57dc14e9b3e21d54786009ba2f6ea6526eb99"}, "memory_unit_benchmarks.MemDiscretiseModel.mem_discretise": {"code": "class MemDiscretiseModel:\n    def mem_discretise(self):\n        MemCreateExpression.mem_create_expression(self)\n        MemParameteriseModel.mem_parameterise(self)\n        submesh_types = {\"negative particle\": pybamm.Uniform1DSubMesh}\n        var_pts = {self.r: 20}\n        mesh = pybamm.Mesh(self.geometry, submesh_types, var_pts)\n    \n        spatial_methods = {\"negative particle\": pybamm.FiniteVolume()}\n        disc = pybamm.Discretisation(mesh, spatial_methods)\n        disc.process_model(self.model)\n        return disc\n\n    def setup(self):\n        set_random_seed()\n        MemCreateExpression.mem_create_expression(self)\n        MemParameteriseModel.mem_parameterise(self)", "name": "memory_unit_benchmarks.MemDiscretiseModel.mem_discretise", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "495195cd9a6ece265ad424338ffde8465bff6b401aff98f26bf908c480b58724"}, "memory_unit_benchmarks.MemDiscretiseModel.mem_parameterise": {"code": "class MemParameteriseModel:\n    def mem_parameterise(self):\n        param = pybamm.ParameterValues(\n            {\n                \"Particle radius [m]\": 10e-6,\n                \"Diffusion coefficient [m2.s-1]\": 3.9e-14,\n                \"Interfacial current density [A.m-2]\": 1.4,\n                \"Faraday constant [C.mol-1]\": 96485,\n                \"Initial concentration [mol.m-3]\": 2.5e4,\n            }\n        )\n    \n        self.r = pybamm.SpatialVariable(\n            \"r\", domain=[\"negative particle\"], coord_sys=\"spherical polar\"\n        )\n    \n        self.geometry = {\n            \"negative particle\": {self.r: {\"min\": pybamm.Scalar(0), \"max\": self.R}}\n        }\n        param.process_model(self.model)\n        param.process_geometry(self.geometry)\n        return param\n\nclass MemDiscretiseModel:\n    def setup(self):\n        set_random_seed()\n        MemCreateExpression.mem_create_expression(self)\n        MemParameteriseModel.mem_parameterise(self)", "name": "memory_unit_benchmarks.MemDiscretiseModel.mem_parameterise", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "3193180de8abb381c009afe51426f5d20e7347c3b9761d1663a98425cce0c663"}, "memory_unit_benchmarks.MemParameteriseModel.mem_create_expression": {"code": "class MemCreateExpression:\n    def mem_create_expression(self):\n        self.R = pybamm.Parameter(\"Particle radius [m]\")\n        D = pybamm.Parameter(\"Diffusion coefficient [m2.s-1]\")\n        j = pybamm.Parameter(\"Interfacial current density [A.m-2]\")\n        F = pybamm.Parameter(\"Faraday constant [C.mol-1]\")\n        c0 = pybamm.Parameter(\"Initial concentration [mol.m-3]\")\n        self.model = pybamm.BaseModel()\n    \n        c = pybamm.Variable(\"Concentration [mol.m-3]\", domain=\"negative particle\")\n        N = -D * pybamm.grad(c)\n        dcdt = -pybamm.div(N)\n        self.model.rhs = {c: dcdt}\n    \n        lbc = pybamm.Scalar(0)\n        rbc = -j / F / D\n        self.model.boundary_conditions = {\n            c: {\"left\": (lbc, \"Neumann\"), \"right\": (rbc, \"Neumann\")}\n        }\n    \n        self.model.initial_conditions = {c: c0}\n        self.model.variables = {\n            \"Concentration [mol.m-3]\": c,\n            \"Surface concentration [mol.m-3]\": pybamm.surf(c),\n            \"Flux [mol.m-2.s-1]\": N,\n        }\n        return self.model\n\nclass MemParameteriseModel:\n    def setup(self):\n        set_random_seed()\n        MemCreateExpression.mem_create_expression(self)", "name": "memory_unit_benchmarks.MemParameteriseModel.mem_create_expression", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "862863fcd24f0545f40184ecdebd166445846c611afed20dcf90f68765c3cc0b"}, "memory_unit_benchmarks.MemParameteriseModel.mem_parameterise": {"code": "class MemParameteriseModel:\n    def mem_parameterise(self):\n        param = pybamm.ParameterValues(\n            {\n                \"Particle radius [m]\": 10e-6,\n                \"Diffusion coefficient [m2.s-1]\": 3.9e-14,\n                \"Interfacial current density [A.m-2]\": 1.4,\n                \"Faraday constant [C.mol-1]\": 96485,\n                \"Initial concentration [mol.m-3]\": 2.5e4,\n            }\n        )\n    \n        self.r = pybamm.SpatialVariable(\n            \"r\", domain=[\"negative particle\"], coord_sys=\"spherical polar\"\n        )\n    \n        self.geometry = {\n            \"negative particle\": {self.r: {\"min\": pybamm.Scalar(0), \"max\": self.R}}\n        }\n        param.process_model(self.model)\n        param.process_geometry(self.geometry)\n        return param\n\n    def setup(self):\n        set_random_seed()\n        MemCreateExpression.mem_create_expression(self)", "name": "memory_unit_benchmarks.MemParameteriseModel.mem_parameterise", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "edad12bc03295b4e89366fc5cfb1ed396d7bb91d3f3c81c80c58aa1302e875c5"}, "memory_unit_benchmarks.MemSolveModel.mem_create_expression": {"code": "class MemCreateExpression:\n    def mem_create_expression(self):\n        self.R = pybamm.Parameter(\"Particle radius [m]\")\n        D = pybamm.Parameter(\"Diffusion coefficient [m2.s-1]\")\n        j = pybamm.Parameter(\"Interfacial current density [A.m-2]\")\n        F = pybamm.Parameter(\"Faraday constant [C.mol-1]\")\n        c0 = pybamm.Parameter(\"Initial concentration [mol.m-3]\")\n        self.model = pybamm.BaseModel()\n    \n        c = pybamm.Variable(\"Concentration [mol.m-3]\", domain=\"negative particle\")\n        N = -D * pybamm.grad(c)\n        dcdt = -pybamm.div(N)\n        self.model.rhs = {c: dcdt}\n    \n        lbc = pybamm.Scalar(0)\n        rbc = -j / F / D\n        self.model.boundary_conditions = {\n            c: {\"left\": (lbc, \"Neumann\"), \"right\": (rbc, \"Neumann\")}\n        }\n    \n        self.model.initial_conditions = {c: c0}\n        self.model.variables = {\n            \"Concentration [mol.m-3]\": c,\n            \"Surface concentration [mol.m-3]\": pybamm.surf(c),\n            \"Flux [mol.m-2.s-1]\": N,\n        }\n        return self.model\n\nclass MemSolveModel:\n    def setup(self):\n        set_random_seed()\n        MemCreateExpression.mem_create_expression(self)\n        MemParameteriseModel.mem_parameterise(self)\n        MemDiscretiseModel.mem_discretise(self)", "name": "memory_unit_benchmarks.MemSolveModel.mem_create_expression", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "16091c4e58d10d32014c88300ed1dcaf80b55cf5b10e264a66a1ea2b8837581e"}, "memory_unit_benchmarks.MemSolveModel.mem_discretise": {"code": "class MemDiscretiseModel:\n    def mem_discretise(self):\n        MemCreateExpression.mem_create_expression(self)\n        MemParameteriseModel.mem_parameterise(self)\n        submesh_types = {\"negative particle\": pybamm.Uniform1DSubMesh}\n        var_pts = {self.r: 20}\n        mesh = pybamm.Mesh(self.geometry, submesh_types, var_pts)\n    \n        spatial_methods = {\"negative particle\": pybamm.FiniteVolume()}\n        disc = pybamm.Discretisation(mesh, spatial_methods)\n        disc.process_model(self.model)\n        return disc\n\nclass MemSolveModel:\n    def setup(self):\n        set_random_seed()\n        MemCreateExpression.mem_create_expression(self)\n        MemParameteriseModel.mem_parameterise(self)\n        MemDiscretiseModel.mem_discretise(self)", "name": "memory_unit_benchmarks.MemSolveModel.mem_discretise", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "34cbd7a52ecdcb0e943a83665c930436c4d296729f856ac0c74a38ebe551e0f9"}, "memory_unit_benchmarks.MemSolveModel.mem_parameterise": {"code": "class MemParameteriseModel:\n    def mem_parameterise(self):\n        param = pybamm.ParameterValues(\n            {\n                \"Particle radius [m]\": 10e-6,\n                \"Diffusion coefficient [m2.s-1]\": 3.9e-14,\n                \"Interfacial current density [A.m-2]\": 1.4,\n                \"Faraday constant [C.mol-1]\": 96485,\n                \"Initial concentration [mol.m-3]\": 2.5e4,\n            }\n        )\n    \n        self.r = pybamm.SpatialVariable(\n            \"r\", domain=[\"negative particle\"], coord_sys=\"spherical polar\"\n        )\n    \n        self.geometry = {\n            \"negative particle\": {self.r: {\"min\": pybamm.Scalar(0), \"max\": self.R}}\n        }\n        param.process_model(self.model)\n        param.process_geometry(self.geometry)\n        return param\n\nclass MemSolveModel:\n    def setup(self):\n        set_random_seed()\n        MemCreateExpression.mem_create_expression(self)\n        MemParameteriseModel.mem_parameterise(self)\n        MemDiscretiseModel.mem_discretise(self)", "name": "memory_unit_benchmarks.MemSolveModel.mem_parameterise", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "e4f639e8ddfb46ec7daa72247577a6c466daa157bef63aa013c20264f9da6a73"}, "memory_unit_benchmarks.MemSolveModel.mem_solve": {"code": "class MemSolveModel:\n    def mem_solve(self):\n        solver = pybamm.ScipySolver()\n        t = np.linspace(0, 3600, 600)\n        solver.solve(self.model, t)\n        return solver\n\n    def setup(self):\n        set_random_seed()\n        MemCreateExpression.mem_create_expression(self)\n        MemParameteriseModel.mem_parameterise(self)\n        MemDiscretiseModel.mem_discretise(self)", "name": "memory_unit_benchmarks.MemSolveModel.mem_solve", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "a7b39a512b545d84bd7d5f0a6ed4d6901e6dc414da7e50ed43c6afa3abd62f0a"}, "time_setup_models_and_sims.TimeBuildDFN.time_setup_DFN": {"code": "class TimeBuildDFN:\n    def time_setup_DFN(self, params):\n        self.param = pybamm.ParameterValues(params)\n        self.model = pybamm.lithium_ion.DFN()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)\n\n    def setup(self, _params):\n        set_random_seed()", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildDFN.time_setup_DFN", "number": 0, "param_names": ["parameter"], "params": [["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'OKane2022'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "0eee82eaa2ed6557bb7cec497b21c1595f4e2ab7f17c33cf98baa7acc53e6ef7", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildDFNSimulation.time_setup_DFN_simulation": {"code": "class TimeBuildDFNSimulation:\n    def time_setup_DFN_simulation(self, with_experiment, params):\n        self.param = pybamm.ParameterValues(params)\n        self.model = pybamm.lithium_ion.DFN()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)\n\n    def setup(self, _with_experiment, _params):\n        set_random_seed()", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildDFNSimulation.time_setup_DFN_simulation", "number": 0, "param_names": ["with experiment", "parameter"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'OKane2022'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "041d84cc1adf4753d7f9652306ad60d0d6364fcc290e4736429f8e7c3c675a12", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildSPM.time_setup_SPM": {"code": "class TimeBuildSPM:\n    def time_setup_SPM(self, params):\n        self.param = pybamm.ParameterValues(params)\n        self.model = pybamm.lithium_ion.SPM()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)\n\n    def setup(self, _params):\n        set_random_seed()", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildSPM.time_setup_SPM", "number": 0, "param_names": ["parameter"], "params": [["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'OKane2022'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "d5778345d68fd67c043a3241f1764d8b6e007490765cb577f15dd6fe38347cad", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildSPMSimulation.time_setup_SPM_simulation": {"code": "class TimeBuildSPMSimulation:\n    def time_setup_SPM_simulation(self, with_experiment, params):\n        self.param = pybamm.ParameterValues(params)\n        self.model = pybamm.lithium_ion.SPM()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)\n\n    def setup(self, _with_experiment, _params):\n        set_random_seed()", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildSPMSimulation.time_setup_SPM_simulation", "number": 0, "param_names": ["with experiment", "parameter"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'OKane2022'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "4af04a0ebcb83401d42904cefe3d57346161aa348bdafe191f95ec33fff21cec", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildSPMe.time_setup_SPMe": {"code": "class TimeBuildSPMe:\n    def time_setup_SPMe(self, params):\n        self.param = pybamm.ParameterValues(params)\n        self.model = pybamm.lithium_ion.SPMe()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)\n\n    def setup(self, _params):\n        set_random_seed()", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildSPMe.time_setup_SPMe", "number": 0, "param_names": ["parameter"], "params": [["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'OKane2022'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "970230e78bb53f069b2e13856e844504c8a106f98359e1d7ad09161d6d03c083", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildSPMeSimulation.time_setup_SPMe_simulation": {"code": "class TimeBuildSPMeSimulation:\n    def time_setup_SPMe_simulation(self, with_experiment, params):\n        self.param = pybamm.ParameterValues(params)\n        self.model = pybamm.lithium_ion.SPMe()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)\n\n    def setup(self, _with_experiment, _params):\n        set_random_seed()", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildSPMeSimulation.time_setup_SPMe_simulation", "number": 0, "param_names": ["with experiment", "parameter"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'OKane2022'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "6f76c516f3fa71f22c3c769426712e12bc3c63681def5407f510a3d24fe28ebf", "warmup_time": -1}, "time_sims_experiments.TimeSimulation.time_setup": {"code": "class TimeSimulation:\n    def time_setup(self, experiment, parameters, model_class, solver_class):\n        param = pybamm.ParameterValues(parameters)\n        model = model_class()\n        solver = solver_class()\n        exp = pybamm.Experiment(self.experiment_descriptions[experiment])\n        pybamm.Simulation(model, parameter_values=param, experiment=exp, solver=solver)\n\n    def setup(self, experiment, parameters, model_class, solver_class):\n        set_random_seed()\n        if (experiment, parameters, model_class, solver_class) == (\n            \"GITT\",\n            \"Marquis2019\",\n            pybamm.lithium_ion.DFN,\n            pybamm.CasadiSolver,\n        ):\n            raise NotImplementedError\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = model_class()\n        self.solver = solver_class()\n        self.exp = pybamm.Experiment(self.experiment_descriptions[experiment])\n        self.sim = pybamm.Simulation(\n            self.model,\n            parameter_values=self.param,\n            experiment=self.exp,\n            solver=self.solver,\n        )", "min_run_count": 2, "name": "time_sims_experiments.TimeSimulation.time_setup", "number": 0, "param_names": ["experiment", "parameter", "model_class", "solver_class"], "params": [["'CCCV'", "'GITT'"], ["'Marquis2019'", "'Chen2020'"], ["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "f919a29c04da89b51fb66aa41294744b714b2d640df50debeff76b55023af868", "warmup_time": -1}, "time_sims_experiments.TimeSimulation.time_solve": {"code": "class TimeSimulation:\n    def time_solve(self, _experiment, _parameters, _model_class, _solver_class):\n        self.sim.solve()\n\n    def setup(self, experiment, parameters, model_class, solver_class):\n        set_random_seed()\n        if (experiment, parameters, model_class, solver_class) == (\n            \"GITT\",\n            \"Marquis2019\",\n            pybamm.lithium_ion.DFN,\n            pybamm.CasadiSolver,\n        ):\n            raise NotImplementedError\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = model_class()\n        self.solver = solver_class()\n        self.exp = pybamm.Experiment(self.experiment_descriptions[experiment])\n        self.sim = pybamm.Simulation(\n            self.model,\n            parameter_values=self.param,\n            experiment=self.exp,\n            solver=self.solver,\n        )", "min_run_count": 2, "name": "time_sims_experiments.TimeSimulation.time_solve", "number": 0, "param_names": ["experiment", "parameter", "model_class", "solver_class"], "params": [["'CCCV'", "'GITT'"], ["'Marquis2019'", "'Chen2020'"], ["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "6832512fe2709d359717d531b49d57f9b07241e3af646c02a9865a7e7b4c96ac", "warmup_time": -1}, "time_solve_models.TimeSolveDFN.time_solve_model": {"code": "class TimeSolveDFN:\n    def time_solve_model(self, _solve_first, _parameters, _solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters, solver_class):\n        set_random_seed()\n        if (parameters, solver_class) == (\n            \"ORegan2022\",\n            pybamm.CasadiSolver,\n        ):\n            raise NotImplementedError\n        self.solver = solver_class()\n        self.model = pybamm.lithium_ion.DFN()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, self.solver, self.t_eval)", "min_run_count": 2, "name": "time_solve_models.TimeSolveDFN.time_solve_model", "number": 0, "param_names": ["solve first", "parameter", "solver_class"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2022'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Chen2020'", "'Ecker2015'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "f6d7b52e57b2a72e7ebdf55b8998c7f7e4ee88848570e445a0f7bd967d6d14be", "warmup_time": -1}, "time_solve_models.TimeSolveSPM.time_solve_model": {"code": "class TimeSolveSPM:\n    def time_solve_model(self, _solve_first, _parameters, _solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters, solver_class):\n        set_random_seed()\n        self.solver = solver_class()\n        self.model = pybamm.lithium_ion.SPM()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, self.solver, self.t_eval)", "min_run_count": 2, "name": "time_solve_models.TimeSolveSPM.time_solve_model", "number": 0, "param_names": ["solve first", "parameter", "solver_class"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ramadass2004'", "'Chen2020'", "'Ecker2015'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "f329b803e6760b144e33d59c3d34fa3d75fa6c26427168501d81c48156c62175", "warmup_time": -1}, "time_solve_models.TimeSolveSPMe.time_solve_model": {"code": "class TimeSolveSPMe:\n    def time_solve_model(self, _solve_first, _parameters, _solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters, solver_class):\n        set_random_seed()\n        self.solver = solver_class()\n        self.model = pybamm.lithium_ion.SPMe()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, self.solver, self.t_eval)", "min_run_count": 2, "name": "time_solve_models.TimeSolveSPMe.time_solve_model", "number": 0, "param_names": ["solve first", "parameter", "solver_class"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ramadass2004'", "'Chen2020'", "'Ecker2015'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "26110b628fab649e6153a529860b3104b379d3f288ca020d4321f489c8a38955", "warmup_time": -1}, "unit_benchmarks.TimeCreateExpression.time_create_expression": {"code": "class TimeCreateExpression:\n    def time_create_expression(self):\n        self.R = pybamm.Parameter(\"Particle radius [m]\")\n        D = pybamm.Parameter(\"Diffusion coefficient [m2.s-1]\")\n        j = pybamm.Parameter(\"Interfacial current density [A.m-2]\")\n        F = pybamm.Parameter(\"Faraday constant [C.mol-1]\")\n        c0 = pybamm.Parameter(\"Initial concentration [mol.m-3]\")\n        self.model = pybamm.BaseModel()\n    \n        c = pybamm.Variable(\"Concentration [mol.m-3]\", domain=\"negative particle\")\n        N = -D * pybamm.grad(c)\n        dcdt = -pybamm.div(N)\n        self.model.rhs = {c: dcdt}\n    \n        lbc = pybamm.Scalar(0)\n        rbc = -j / F / D\n        self.model.boundary_conditions = {\n            c: {\"left\": (lbc, \"Neumann\"), \"right\": (rbc, \"Neumann\")}\n        }\n    \n        self.model.initial_conditions = {c: c0}\n        self.model.variables = {\n            \"Concentration [mol.m-3]\": c,\n            \"Surface concentration [mol.m-3]\": pybamm.surf(c),\n            \"Flux [mol.m-2.s-1]\": N,\n        }\n\n    def setup(self):\n        set_random_seed()", "min_run_count": 2, "name": "unit_benchmarks.TimeCreateExpression.time_create_expression", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "79567e8fc10e82bb7efc93e89a5fa48101c5f63b2bcf09f9affa1daeaa660a7a", "warmup_time": -1}, "unit_benchmarks.TimeDiscretiseModel.time_create_expression": {"code": "class TimeCreateExpression:\n    def time_create_expression(self):\n        self.R = pybamm.Parameter(\"Particle radius [m]\")\n        D = pybamm.Parameter(\"Diffusion coefficient [m2.s-1]\")\n        j = pybamm.Parameter(\"Interfacial current density [A.m-2]\")\n        F = pybamm.Parameter(\"Faraday constant [C.mol-1]\")\n        c0 = pybamm.Parameter(\"Initial concentration [mol.m-3]\")\n        self.model = pybamm.BaseModel()\n    \n        c = pybamm.Variable(\"Concentration [mol.m-3]\", domain=\"negative particle\")\n        N = -D * pybamm.grad(c)\n        dcdt = -pybamm.div(N)\n        self.model.rhs = {c: dcdt}\n    \n        lbc = pybamm.Scalar(0)\n        rbc = -j / F / D\n        self.model.boundary_conditions = {\n            c: {\"left\": (lbc, \"Neumann\"), \"right\": (rbc, \"Neumann\")}\n        }\n    \n        self.model.initial_conditions = {c: c0}\n        self.model.variables = {\n            \"Concentration [mol.m-3]\": c,\n            \"Surface concentration [mol.m-3]\": pybamm.surf(c),\n            \"Flux [mol.m-2.s-1]\": N,\n        }\n\nclass TimeDiscretiseModel:\n    def setup(self):\n        set_random_seed()\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeDiscretiseModel.time_create_expression", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "53f64bb63b703ce09229d62a777fa5f21abf561c70430ff978cd6fce8363f76c", "warmup_time": -1}, "unit_benchmarks.TimeDiscretiseModel.time_discretise": {"code": "class TimeDiscretiseModel:\n    def time_discretise(self):\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)\n        submesh_types = {\"negative particle\": pybamm.Uniform1DSubMesh}\n        var_pts = {self.r: 20}\n        mesh = pybamm.Mesh(self.geometry, submesh_types, var_pts)\n    \n        spatial_methods = {\"negative particle\": pybamm.FiniteVolume()}\n        disc = pybamm.Discretisation(mesh, spatial_methods)\n        disc.process_model(self.model)\n\n    def setup(self):\n        set_random_seed()\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeDiscretiseModel.time_discretise", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "82d1028bb6552573a282aead5ecf23b4c233624a98d553f417f9b632904cf779", "warmup_time": -1}, "unit_benchmarks.TimeDiscretiseModel.time_parameterise": {"code": "class TimeParameteriseModel:\n    def time_parameterise(self):\n        param = pybamm.ParameterValues(\n            {\n                \"Particle radius [m]\": 10e-6,\n                \"Diffusion coefficient [m2.s-1]\": 3.9e-14,\n                \"Interfacial current density [A.m-2]\": 1.4,\n                \"Faraday constant [C.mol-1]\": 96485,\n                \"Initial concentration [mol.m-3]\": 2.5e4,\n            }\n        )\n    \n        self.r = pybamm.SpatialVariable(\n            \"r\", domain=[\"negative particle\"], coord_sys=\"spherical polar\"\n        )\n    \n        self.geometry = {\n            \"negative particle\": {self.r: {\"min\": pybamm.Scalar(0), \"max\": self.R}}\n        }\n        param.process_model(self.model)\n        param.process_geometry(self.geometry)\n\nclass TimeDiscretiseModel:\n    def setup(self):\n        set_random_seed()\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeDiscretiseModel.time_parameterise", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "ef8b306be418ea6cffb6df7d95c34e6e4c058556b81285cfe00a85a746364e11", "warmup_time": -1}, "unit_benchmarks.TimeParameteriseModel.time_create_expression": {"code": "class TimeCreateExpression:\n    def time_create_expression(self):\n        self.R = pybamm.Parameter(\"Particle radius [m]\")\n        D = pybamm.Parameter(\"Diffusion coefficient [m2.s-1]\")\n        j = pybamm.Parameter(\"Interfacial current density [A.m-2]\")\n        F = pybamm.Parameter(\"Faraday constant [C.mol-1]\")\n        c0 = pybamm.Parameter(\"Initial concentration [mol.m-3]\")\n        self.model = pybamm.BaseModel()\n    \n        c = pybamm.Variable(\"Concentration [mol.m-3]\", domain=\"negative particle\")\n        N = -D * pybamm.grad(c)\n        dcdt = -pybamm.div(N)\n        self.model.rhs = {c: dcdt}\n    \n        lbc = pybamm.Scalar(0)\n        rbc = -j / F / D\n        self.model.boundary_conditions = {\n            c: {\"left\": (lbc, \"Neumann\"), \"right\": (rbc, \"Neumann\")}\n        }\n    \n        self.model.initial_conditions = {c: c0}\n        self.model.variables = {\n            \"Concentration [mol.m-3]\": c,\n            \"Surface concentration [mol.m-3]\": pybamm.surf(c),\n            \"Flux [mol.m-2.s-1]\": N,\n        }\n\nclass TimeParameteriseModel:\n    def setup(self):\n        set_random_seed()\n        TimeCreateExpression.time_create_expression(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeParameteriseModel.time_create_expression", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "c9c6590d7ea983ffd2ec4a0beb7198254c9872b5d79fafe982b5575dcbf533ea", "warmup_time": -1}, "unit_benchmarks.TimeParameteriseModel.time_parameterise": {"code": "class TimeParameteriseModel:\n    def time_parameterise(self):\n        param = pybamm.ParameterValues(\n            {\n                \"Particle radius [m]\": 10e-6,\n                \"Diffusion coefficient [m2.s-1]\": 3.9e-14,\n                \"Interfacial current density [A.m-2]\": 1.4,\n                \"Faraday constant [C.mol-1]\": 96485,\n                \"Initial concentration [mol.m-3]\": 2.5e4,\n            }\n        )\n    \n        self.r = pybamm.SpatialVariable(\n            \"r\", domain=[\"negative particle\"], coord_sys=\"spherical polar\"\n        )\n    \n        self.geometry = {\n            \"negative particle\": {self.r: {\"min\": pybamm.Scalar(0), \"max\": self.R}}\n        }\n        param.process_model(self.model)\n        param.process_geometry(self.geometry)\n\n    def setup(self):\n        set_random_seed()\n        TimeCreateExpression.time_create_expression(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeParameteriseModel.time_parameterise", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "2db8360d2edcfa78dd7840bfc00d24c0e9649c847253c89fe402671c262b1338", "warmup_time": -1}, "unit_benchmarks.TimeSolveModel.time_create_expression": {"code": "class TimeCreateExpression:\n    def time_create_expression(self):\n        self.R = pybamm.Parameter(\"Particle radius [m]\")\n        D = pybamm.Parameter(\"Diffusion coefficient [m2.s-1]\")\n        j = pybamm.Parameter(\"Interfacial current density [A.m-2]\")\n        F = pybamm.Parameter(\"Faraday constant [C.mol-1]\")\n        c0 = pybamm.Parameter(\"Initial concentration [mol.m-3]\")\n        self.model = pybamm.BaseModel()\n    \n        c = pybamm.Variable(\"Concentration [mol.m-3]\", domain=\"negative particle\")\n        N = -D * pybamm.grad(c)\n        dcdt = -pybamm.div(N)\n        self.model.rhs = {c: dcdt}\n    \n        lbc = pybamm.Scalar(0)\n        rbc = -j / F / D\n        self.model.boundary_conditions = {\n            c: {\"left\": (lbc, \"Neumann\"), \"right\": (rbc, \"Neumann\")}\n        }\n    \n        self.model.initial_conditions = {c: c0}\n        self.model.variables = {\n            \"Concentration [mol.m-3]\": c,\n            \"Surface concentration [mol.m-3]\": pybamm.surf(c),\n            \"Flux [mol.m-2.s-1]\": N,\n        }\n\nclass TimeSolveModel:\n    def setup(self):\n        set_random_seed()\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)\n        TimeDiscretiseModel.time_discretise(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeSolveModel.time_create_expression", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "7d5ffee2c28dcaa231b44408496fce54271121737b80dc5a7498beb92ab2b159", "warmup_time": -1}, "unit_benchmarks.TimeSolveModel.time_discretise": {"code": "class TimeDiscretiseModel:\n    def time_discretise(self):\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)\n        submesh_types = {\"negative particle\": pybamm.Uniform1DSubMesh}\n        var_pts = {self.r: 20}\n        mesh = pybamm.Mesh(self.geometry, submesh_types, var_pts)\n    \n        spatial_methods = {\"negative particle\": pybamm.FiniteVolume()}\n        disc = pybamm.Discretisation(mesh, spatial_methods)\n        disc.process_model(self.model)\n\nclass TimeSolveModel:\n    def setup(self):\n        set_random_seed()\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)\n        TimeDiscretiseModel.time_discretise(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeSolveModel.time_discretise", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "a4e41d181f7a8ac4c6c873e0aafa291f45deb155ad92dc625301917565fe6bdc", "warmup_time": -1}, "unit_benchmarks.TimeSolveModel.time_parameterise": {"code": "class TimeParameteriseModel:\n    def time_parameterise(self):\n        param = pybamm.ParameterValues(\n            {\n                \"Particle radius [m]\": 10e-6,\n                \"Diffusion coefficient [m2.s-1]\": 3.9e-14,\n                \"Interfacial current density [A.m-2]\": 1.4,\n                \"Faraday constant [C.mol-1]\": 96485,\n                \"Initial concentration [mol.m-3]\": 2.5e4,\n            }\n        )\n    \n        self.r = pybamm.SpatialVariable(\n            \"r\", domain=[\"negative particle\"], coord_sys=\"spherical polar\"\n        )\n    \n        self.geometry = {\n            \"negative particle\": {self.r: {\"min\": pybamm.Scalar(0), \"max\": self.R}}\n        }\n        param.process_model(self.model)\n        param.process_geometry(self.geometry)\n\nclass TimeSolveModel:\n    def setup(self):\n        set_random_seed()\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)\n        TimeDiscretiseModel.time_discretise(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeSolveModel.time_parameterise", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "14eb896be95381d740fa3f69396eb480514a09da23f2525bce6c81124247ca72", "warmup_time": -1}, "unit_benchmarks.TimeSolveModel.time_solve": {"code": "class TimeSolveModel:\n    def time_solve(self):\n        solver = pybamm.ScipySolver()\n        t = np.linspace(0, 3600, 600)\n        solver.solve(self.model, t)\n\n    def setup(self):\n        set_random_seed()\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)\n        TimeDiscretiseModel.time_discretise(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeSolveModel.time_solve", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "3b060ae2823c304802df15803cd5d845699526f2b740e5e252d5890f61967a01", "warmup_time": -1}}, "machines": {"GitHubRunner": {"machine": "GitHubRunner", "version": 1}}, "tags": {"v0.1.0": 3608, "v0.2.0": 4954, "v0.2.1": 5277, "v0.2.2": 5978, "v0.2.3": 6424, "v0.2.4": 6787, "v0.3.0": 7341, "v0.3.0-beta": 7278, "v0.4.0": 8395, "v21.08": 9197, "v21.10": 9483, "v21.11": 9854, "v21.12": 10003, "v21.9": 9369, "v22.1": 10215, "v22.10": 11905, "v22.11": 12283, "v22.11.1": 12414, "v22.12": 12480, "v22.2": 10275, "v22.3": 10402, "v22.4": 10494, "v22.5": 10655, "v22.6": 10796, "v22.7": 11123, "v22.8": 11339, "v22.9": 11581, "v23.1": 12629, "v23.2": 12912, "v23.3": 13248, "v23.4": 13398, "v23.4.1": 13410, "v23.5": 13988, "v23.5rc0": 13809, "v23.9": 15674, "v23.9rc0": 15366, "v23.9rc1": 15619}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}