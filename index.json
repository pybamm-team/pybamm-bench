{"project": "PyBaMM", "project_url": "https://www.pybamm.org/", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"3639": "8afc8f94f75b6f0b51928f43819f9894d2b91020", "4985": "801492b250a6637554d99a4662a0d85c3354ceea", "5321": "105714c9748f7c7f3824411240ab583ac6c4973a", "6031": "eff587b12cd3e41b911c4665909f3d4ab8a8f50f", "6477": "09a3c082833f876bd5f4962306340886d29fa116", "6840": "f00b8d11ec0c4169c53d6fb1e0cd58e71009e924", "7336": "e408c41c6c3c432da7fc9a49263e4fc3b454ca45", "7399": "d1d6af04c5083b6c413fe30b1af4f4add1b222e3", "8453": "0a99ea46b37bedd729f75d8d1e101122c27bb6d8", "8724": "f6cb07aa40ec406ba9eba3f90c09ccf0c5feb539", "8977": "c0a7f58f23bff963de63804011f79cbdb5ca43db", "9226": "00a93578a1e270876ea13e89dc2568dbc1a50b86", "9255": "c4ba93ffe27597c18ff1848d644d6585601e30d5", "9386": "463677471462d93e2fe1f7b7444820dc22689c30", "9427": "c737eacae81da8565fb35711260c95791a56cc54", "9507": "3a120d766fdd87b3a7f9212920c0d6d68544832f", "9541": "aa8be739b0219304dd2e933c02c82651831cfa9b", "9732": "d69db284eed874fd7b066e57db4259d0fee98fe6", "9912": "15992b32d969323f038c789340c87c2254354e55", "10011": "85c66a739896bcb678be58583ebcfac22e426004", "10061": "7f4bf8765621c462fabadb33734142062b51bfee", "10238": "7f3a4bbf124e0ad9c4c911db708d4467987c7fe0", "10273": "0216c382873fad07014f9acddda67e774c3a1c74", "10284": "3d55351e27809534dedde46e10df0e499f586137", "10300": "bc791566091507b286d02ee5936a414373086b54", "10303": "214a4b1e8fc5da6dc42211572454f31671ac1af2", "10308": "2e04ddd51941d01ea95835a7aa957ff9785fb9e9", "10313": "24161dfd5d628847dbf91d1c9b12166a6e62d980", "10328": "fa15226dde16f66a7c732ae31fed8dbee1b23e3a", "10333": "233d476f74f09b119ee7ac4765efe9b751d0a134", "10342": "5473db5678702d2942478280cc3b51540d6edaf6", "10366": "fb76610f4a4cbf7305d54bdbfa81eaac8377b392", "10382": "7cca539cb95f2556f99658f6fb97338979459851", "10394": "795a0c08151859b5e0e5ec9d99ff44c2dcf668d0", "10404": "804ea24742bddd9267d0b0a2148779e9ef420b91", "10413": "524839d1ccb48835019edb898bdcc648eeaadb7b", "10420": "979d14b4846e4d3dbf3a49a7ec32ab50422e917e", "10423": "e485a0117aad693d96a6d520d0a9370f254e1430", "10436": "d0b5beb2fb80a8a17ad71a9e843cc838e075c79f", "10445": "23157aebce218444edc83b525dfb2c7fc8637598", "10460": "dd0d4b532c49b73bf77224f38cd3c6101c819068", "10500": "5643116d5b8bd2622c13879d09b07d9952714c5b", "10516": "9eea12b9b0813ac3c7e269c4c74b54d5240b7f67", "10534": "e4bd6c12f05823750ada4f8056879d6406831347", "10552": "3b8d775505186f70994b40512be7e94c9eb7bcc1", "10636": "309ba7280ae3de3b9ea9426424ae08001d1488e3", "10645": "a8ad2d66705c930431de5b61f38959725935c311", "10656": "7fd51553d41359e17a111c9d02497f1ee7d12f72", "10664": "e992f1202b571d5fb9de729bf71ccb968db786f7", "10671": "134585fb5cc5604f046ec30d1e9d622588d82e89", "10689": "f649e6adf2072d5bdec0fb12402eb2e3f379bdf0", "10699": "0ce0a71364be6e301c3d4379d4e0b0e601d690bb", "10704": "2c74a4f86797e707a8f205c6482233fb5aa34dd8", "10713": "e1f52ffcf9811bb7d5046af47c48a2291bfd50b8", "10741": "79b9368de9341b893378ddb20651a5e5c7ba5597", "10742": "bc72c6d4cb430eb8ec8a83323a996fc87b5297c7", "10755": "23d31f98a19194ba2eb0c415dab3fb55db509486", "10761": "754fc18db2325a598650a6781df35529383b5a70", "10764": "9d3b1c3c39644289e877088db842fb29c44cc4e3", "10774": "d0f8f35f7fea4d8f2aef9d06a5117ce8bcf81bb1", "10783": "9ec6ebcbc641379826ad46913cf33f3b4c3f5cf1", "10799": "0fd8cf360725ffdc5cd177de60ec78ad79833ac6", "10822": "ded5a577fbaa69443dbbf1a3990cdf17dd167a50", "10844": "0270a8e0cd27bcfc08fe54d6d4a60e44640b02a0", "10854": "7c5b44eac083c76ac7464d4c334d04351c067643", "10867": "e5714a9d747ea772685161043d37d5c99972da99", "10881": "b2407961d4bf1159143d31ad6077fe8c2a6f984d", "10888": "212c306c0a1c55638cb77a25f31be08a2214e953", "10909": "6a51492f831d8c035cf45749bfe3f3513091d4a0", "10931": "6877eac95342e99e52728148c674589cd92dd193", "10957": "1cd386dde15aad7bf194f94d17e1d80bdcb803f4", "10959": "d4c5880e742c06cba28751aadf987ade94ac30e8", "10984": "33a403757fedfc68bd2cbf97af9c58d6d28fc5c7", "11003": "41bf72baf60a54482bbd8353ac8e697f7f440860", "11011": "3fb587769864a5437996f114a5041ecd4187cc52", "11033": "e4964ba1170b384d0ea59ee3785c8848f55a884b", "11050": "985678530e57b2f8faf9f06755e5ccbf195d46cd", "11081": "4c423127dc2f9e51278ae2601432f4116352cf4a", "11106": "0419e4e9d3dc8dfc8600021d39a905a9b39030bf", "11108": "a6462b0f5fa173e7ced738604eacea6e0c2bf266", "11112": "2e90d3aaf532522e25aeb253bed4965bb8d9449d", "11135": "59c99b2cf56984dd98ff189083ce90720976c1f1", "11155": "3c7ad7c8f9d093bab2860bb2664986007a07c26c", "11181": "5f4913d9246c61856a72284b8dead52f3ad97bd3", "11187": "96aaa75c85d5c8f905fa79f6386478b3f8d3137b", "11199": "2f3c3fade3fc56320563228c501f94b078c7d446", "11239": "0bb70d240841225b785c70cdcd6bb7575b1d33ca", "11252": "70b9e343121cf53b08f34ad9bc7d27e9f9517734", "11280": "7b1f1fce48ade4865b5c4d0cba743bca779c6002", "11297": "6c3319cc03591e4cf710c645b22fa2de838e2e07", "11322": "a1bc6781da34a78ea3548d68c03d828929460333", "11330": "1472d971ed90531e9ff45c3310f35bc01d6c8eb3", "11353": "4a8a2211d0a6b6efc5ec4d4699976474d28a3ab4", "11386": "3e6775adeae3bc8bef188c3265a5f70f9a875f14", "11388": "aaa42e5ae83d88e5671c6de600f0648eced99670", "11397": "1f01c1e391cc7d01feba405e40584e2f6c456fae", "11432": "831d903c1965b9a760987ed87b052845d7a7b149", "11434": "65b464521d84f4b08f8cf599885f6af68bab6bfa", "11448": "8c4b3d60d5980748ba8a673be50aa140eb57cb63", "11466": "b25ce8c41584e6a95e28238b2617f1f1982a9534", "11502": "256da2638404a39d7e2d4b4830e219b9c4a0de88", "11505": "669af80b3768d6569dc7e3b72a1584928851a286", "11538": "96e57ec85ccc50548c86a5cf2321498663a77f4c", "11603": "f5d16bc424af09bc0b4c0879801cbe7d88bf4807", "11632": "75cfa696d0f0c280d26c439d2c1a09efea229ca0", "11639": "a1091ecbf3476287c5c29a94a4bd27f4adb42149", "11654": "cf03cf988b1f6d47ed54c6231f1aa88d25ceeb41", "11713": "82a705cda10aef3c9c24228b371365ee2d0cb81a", "11728": "f3b84024d603847db2ea31a139c6806466cb0d59", "11748": "924ee9e7f23f76b9d2b530cebc448c3d9fff0d79", "11764": "05a2ea09fe4b4c0bcbd48d1500bd26ed7ee427eb", "11790": "91a97cd2a6350aa9222c945e25711e1ae87e6f07", "11805": "c89445ea5111d9c565452fc1c69fed00814291da", "11829": "d0bed316f9389bdaa48ff361666f38992d8e9180", "11847": "ead95e04db897ea61e6d6faa4edc6e0c39f9f06f", "11858": "58879c82c7678198a76052b00566c5d09bf8a9a4", "11908": "6d8c046479851ff16474b5f53628b047a82b83ce", "11919": "03862934e4233a376e8e8e613c7fa5f7eec79003", "11939": "4127bd137723ad5bbd268cc506392a34101ba7a8", "11960": "ed12e8e96de5d19fe0b7c13c385cdc5a6c87447f", "11963": "a5aca9cafda6e3f21f4a6ce596243c35c3b52f42", "11984": "2b882d2f1559bec0b419ad261704e3ac3322eaab", "12015": "959081ee329f49cb6f6fc04a4f420da056500a02", "12050": "bc83ce7cc838dac36946574950e807d788cf7af7", "12059": "d5547da8e0bbe4d05f1be35eb0226f6662452733", "12110": "8bdc3e039860c098d0c24f2e5b74ecee08285266", "12131": "5d9f320ed02a58d0cf35ca60df484da5c982e36f", "12147": "dfb31da0e3250f5581f014cd0db2c2761b3a30da", "12166": "8478e9a6168c4a3e6b0720be07c6ad6c6dae5fe6", "12190": "24e465d51b70fd1c220319084c9aac8bac98af1a", "12210": "c8f2890c08d9f9c12c64027255864af86582f508", "12256": "4f233b061f5dfd8cadbe61fd72339235f0f410e9", "12283": "76072c889203023af4f56fa3885e5b6a27747602", "12285": "53cf744cbc4d3b6fd70ad6f1669596d61578d82b", "12303": "8d042b3fa297f883ba8b2975a1c61a0439345b34", "12320": "02292604535629ebc8b2cc6ca1fe061dbdd9977c", "12339": "c17756f1b7605403e8e3f025c9d3568517941529", "12341": "efd426c64b75afcfa14a5552d908ed4c3bbf0e8e", "12364": "b072d22f1344f062fc84ca44e0c540873669b6f7", "12397": "c38f385675c0a6481de776acd5de7182eca77ab8", "12430": "97e27851942c9722017a636df2fbd78aedda8b08", "12453": "0afb069ba6b808a5e2539780a1a6b5eb246441dd", "12472": "08db55996e30b5ddb5c429689d0890618f9c8f39", "12478": "18d3bc5cad6413e5dd41043356b4d26bd5510d25", "12488": "7800bbcb07b5a7be81d8c32b52a89f231381951b", "12503": "c4baa51081f7ba38eea6ccb21a9e9fe89b71c934", "12538": "e090ada72f0d9048d08a1008368b0e25321f83b1", "12545": "bf76f86114c825a051b94bd652f8d42da6551fd9", "12553": "59b63d563aa71a37b7b2e52e3adf517b26b90cd4", "12563": "fa5ec1b58e93de2f087d9cd495a241af04d5200a", "12604": "5be34ac48dcad0f671c3e79a0e28bdcf9dfdc175", "12687": "0c120dec50c7d70798497489baca79c4c5d96834", "12970": "81d8c351579af9ed1196805eab8e36ca61ca2468", "13306": "2c4bceafae1206cee3dc9802dafe56491fdd083e", "13456": "521c5f4a611e909c160accbd122e7449282151ee", "13468": "7c9bcfbcf66b390c82633ec4c7ba554d34e8d40f", "13480": "352bd0283754486f95a124b9e9aa5229afeeb27b", "13523": "0b707d19f998d006c44f347a1d4edced8c877ac7", "13540": "634f7c7389be8626c95cb22350b4e444274cceb1", "13576": "3d2067873bd391477dec495c62d57d520d335e7c", "13582": "6f2199c26c4e602feb6ef293c6b35e50353f6e8a", "13608": "9d60f052783a25ab43a0e2203a0c1520bbe3b7e9", "13622": "d90a56c5bc9d8d81c9378c423f7927aa5ec1ed30", "13646": "7e681e2b4eee4721e875c3d899a9144f1d48d678", "13666": "57d06db6a6da0cf5a304639df29163dd8e2113fb", "13693": "3dc2fb31df994df12a4377812e3ead615409dcfd", "13725": "a1e64c7715723b67928a9423e714689d9ee06e83", "13789": "a404cbd13ed36ff7bdd923f1b25aeeb6f6aade7b", "13821": "788ab6e7b44af67af6592a205bac0ca922efa0e6", "13846": "c2ca937f4b24bb3b2428809b3307cdb577caf0ab", "13849": "abc53f52c9ab4a930e612413385569c0c631f251", "13868": "c732253e559d8020dbd3dc1f165f0924f97a8a8d", "13869": "48e81e3dc9f3cd14c0b9ccaa3b9407c98d9ec4a2", "13895": "bf8581174460005f4d4ecb1a0b56cbf665cd59ce", "14047": "5e28bb9a316f394282b40c8a56b285e85d987b77", "14087": "4df9b99bf837500dc5001a175628400d8f9a053d", "14091": "f74c32c2186f6abcc67de03f302ef80fc741d388", "14142": "79e55a4090bb6f53ef9fea01d4d9323927c78563", "14247": "f1f3fe50295bbd5cb749e4df7cf28dc6af17abe3", "14264": "02c56a2fea4bfb094b220609d0a34042d47340a6", "14294": "2efdfade290b5b3680685f55d6a62f671b3038c0", "14321": "f588f2084217e8c028857c65c72127cc153b6b0e", "14339": "19984286f62bb07e2ad42a804c08e980db2e6d2d", "14350": "79af68d8476c1d75512d570ff8e9c5e20e5af021", "14364": "65316abf23b182afafd67eaffd1a629746e6b9c0", "14377": "d588ec18f8ff4ba87a0355cde102e5b11e55511a", "14393": "695917e345dc28af65d7654e66d07aedb9494d93", "14399": "3f7df5fb2cfeddb9ecee6581dac8c70efec06205", "14419": "e05aa6bb44c1ecaeddec0efa20e99f56f803ab68", "14433": "61e04b3bd0f5324cb3292c02b08ef788dfcb86b7", "14459": "525db23c9822fe774ebf6804ddce2d04f0ce61a0", "14482": "35fd252be7b7ce59e24689d5e0bbbb0a760f6e23", "14511": "8662763cc81493ffb05d649627c244a4170cc2f0", "14528": "f0cc9847003f7b362b0bc703b4f2b129c98c91f5", "14565": "a2a41847883c5b8e026e939af097fa6687d00beb", "14591": "b6d4f3f09fae887d142e52913219595b11098c3d", "14621": "f4dfbe71765fa32bc805f30da1ea9ed27acb6c8b", "14654": "e7bd82f9b77045601d938cc67b707312b3d3a407", "15182": "7eb5879c264e26b02a71b0ced8ef11a5f092e451", "15193": "6699f31fb751857a1368e5e7b16d715f44c660ff", "15262": "d67b0094e7d35ffc8cca1480a9d60fc2bf1bcdb2"}, "revision_to_date": {"3639": 1570093702000, "4985": 1582740136000, "5321": 1585676155000, "6031": 1591033902000, "6477": 1593631560000, "6840": 1599491896000, "7336": 1606088199000, "7399": 1606841582000, "8453": 1617010666000, "8724": 1623191999000, "8977": 1627560622000, "9226": 1629941483000, "9255": 1630512171000, "9386": 1632146150000, "9427": 1633361655000, "9507": 1635177742000, "9541": 1635717739000, "9732": 1636835649000, "9912": 1638296811000, "10011": 1639518516000, "10061": 1640969974000, "10238": 1643639908000, "10273": 1643925156000, "10284": 1644089700000, "10300": 1644349796000, "10303": 1644502545000, "10308": 1645566656000, "10313": 1645740856000, "10328": 1646061111000, "10333": 1646125361000, "10342": 1646247845000, "10366": 1646755470000, "10382": 1646873103000, "10394": 1646931876000, "10404": 1647006111000, "10413": 1647179848000, "10420": 1647266364000, "10423": 1647343999000, "10436": 1647632702000, "10445": 1647978831000, "10460": 1648568226000, "10500": 1649954862000, "10516": 1650485426000, "10534": 1651062961000, "10552": 1651510060000, "10636": 1652061084000, "10645": 1652279780000, "10656": 1652430863000, "10664": 1652807866000, "10671": 1652970416000, "10689": 1653420634000, "10699": 1653606749000, "10704": 1653677328000, "10713": 1653925577000, "10741": 1654598015000, "10742": 1654603577000, "10755": 1654719862000, "10761": 1654785090000, "10764": 1655145895000, "10774": 1655308368000, "10783": 1655400342000, "10799": 1655915507000, "10822": 1656091547000, "10844": 1656451570000, "10854": 1656521917000, "10867": 1656608292000, "10881": 1656701477000, "10888": 1656798203000, "10909": 1657123170000, "10931": 1657225826000, "10957": 1657573160000, "10959": 1657623357000, "10984": 1658075891000, "11003": 1658332357000, "11011": 1658425801000, "11033": 1658766316000, "11050": 1658857735000, "11081": 1658956303000, "11106": 1659108567000, "11108": 1659191438000, "11112": 1659368325000, "11135": 1659446562000, "11155": 1659547593000, "11181": 1659695165000, "11187": 1659710861000, "11199": 1659980747000, "11239": 1660557214000, "11252": 1660647179000, "11280": 1660759877000, "11297": 1660840017000, "11322": 1660928419000, "11330": 1661175501000, "11353": 1661324838000, "11386": 1661434418000, "11388": 1661528818000, "11397": 1661789290000, "11432": 1662427083000, "11434": 1662461732000, "11448": 1662644216000, "11466": 1662739142000, "11502": 1663034289000, "11505": 1663058369000, "11538": 1663210216000, "11603": 1663792732000, "11632": 1664303882000, "11639": 1664362767000, "11654": 1664645121000, "11713": 1665091986000, "11728": 1665415649000, "11748": 1665511852000, "11764": 1665583108000, "11790": 1665693613000, "11805": 1666064378000, "11829": 1666196938000, "11847": 1666282558000, "11858": 1666359781000, "11908": 1666731122000, "11919": 1666792940000, "11939": 1666900451000, "11960": 1666983669000, "11963": 1667161799000, "11984": 1667406203000, "12015": 1667550738000, "12050": 1667831411000, "12059": 1667924799000, "12110": 1668109682000, "12131": 1668391656000, "12147": 1668609568000, "12166": 1668808583000, "12190": 1668963744000, "12210": 1669037980000, "12256": 1669483921000, "12283": 1669686056000, "12285": 1669714349000, "12303": 1669835266000, "12320": 1669985783000, "12339": 1670190455000, "12341": 1670196710000, "12364": 1670275209000, "12397": 1670642177000, "12430": 1670889796000, "12453": 1670962197000, "12472": 1671037775000, "12478": 1671045553000, "12488": 1671117900000, "12503": 1671641451000, "12538": 1672263701000, "12545": 1672555168000, "12553": 1672854390000, "12563": 1673015690000, "12604": 1673447890000, "12687": 1675165196000, "12970": 1677610075000, "13306": 1680343857000, "13456": 1682866089000, "13468": 1683042293000, "13480": 1683059467000, "13523": 1683303528000, "13540": 1683648919000, "13576": 1684334596000, "13582": 1684418094000, "13608": 1684526433000, "13622": 1684774009000, "13646": 1684940884000, "13666": 1685108870000, "13693": 1685433937000, "13725": 1685646133000, "13789": 1686360350000, "13821": 1686704606000, "13846": 1686955750000, "13849": 1687016459000, "13868": 1687176960000, "13869": 1687183481000, "13895": 1687362082000, "14047": 1688049899000, "14087": 1688429870000, "14091": 1688481408000, "14142": 1688593402000, "14247": 1689722927000, "14264": 1689775269000, "14294": 1689885387000, "14321": 1689992005000, "14339": 1690145351000, "14350": 1690228907000, "14364": 1690294402000, "14377": 1690377260000, "14393": 1690503609000, "14399": 1690558930000, "14419": 1690824060000, "14433": 1690925180000, "14459": 1691013967000, "14482": 1691091366000, "14511": 1691180718000, "14528": 1691267472000, "14565": 1691444079000, "14591": 1691537465000, "14621": 1691636679000, "14654": 1691685250000, "15182": 1696094703000, "15193": 1696247241000, "15262": 1696346957000}, "params": {"machine": ["GitHubRunner"], "python": ["3.8"], "numpy": ["", null], "casadi": ["", null], "wget": ["", null], "cmake": ["", null], "anytree": ["", null], "autograd": ["", null], "scikit-fem": ["", null], "imageio": ["", null], "pybtex": ["", null], "sympy": ["", null], "bpx": ["", null], "tqdm": ["", null], "matplotlib": ["", null], "env-LD_LIBRARY_PATH": ["/home/runner/.local/lib", null], "branch": ["develop"]}, "graph_param_list": [{"machine": "GitHubRunner", "python": "3.8", "branch": "develop", "numpy": null, "casadi": null, "wget": null, "cmake": null, "anytree": null, "autograd": null, "scikit-fem": null, "imageio": null, "pybtex": null, "sympy": null, "bpx": null, "tqdm": null, "matplotlib": null, "env-LD_LIBRARY_PATH": null}, {"machine": "GitHubRunner", "python": "3.8", "numpy": "", "casadi": "", "wget": "", "cmake": "", "anytree": "", "autograd": "", "scikit-fem": "", "imageio": "", "pybtex": "", "sympy": "", "bpx": "", "tqdm": "", "matplotlib": "", "env-LD_LIBRARY_PATH": "/home/runner/.local/lib", "branch": "develop"}, {"machine": "GitHubRunner", "python": "3.8", "numpy": "", "casadi": "", "wget": "", "cmake": "", "env-LD_LIBRARY_PATH": "/home/runner/.local/lib", "branch": "develop", "anytree": null, "autograd": null, "scikit-fem": null, "imageio": null, "pybtex": null, "sympy": null, "bpx": null, "tqdm": null, "matplotlib": null}], "benchmarks": {"different_model_options.TimeBuildModelLithiumPlating.time_setup_model": {"code": "class TimeBuildModelLithiumPlating:\n    def time_setup_model(self, model, params):\n        build_model(\"OKane2022\", model, \"lithium plating\", params)", "min_run_count": 2, "name": "different_model_options.TimeBuildModelLithiumPlating.time_setup_model", "number": 0, "param_names": ["model", "model option"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'none'", "'irreversible'", "'reversible'", "'partially reversible'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "9f3dfe67f8a8a4383ed41454515e96f36fbd859c7a8c86ee1b80ed0fe446c02c", "warmup_time": -1}, "different_model_options.TimeBuildModelLossActiveMaterial.time_setup_model": {"code": "class TimeBuildModelLossActiveMaterial:\n    def time_setup_model(self, model, params):\n        build_model(\"Ai2020\", model, \"loss of active material\", params)", "min_run_count": 2, "name": "different_model_options.TimeBuildModelLossActiveMaterial.time_setup_model", "number": 0, "param_names": ["model", "model option"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'none'", "'stress-driven'", "'reaction-driven'", "'stress and reaction-driven'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "92f39a892bcc5c7db147e87ef2cdd1a8fbfbb90ed1ee5a8907203ba6c7d2aecf", "warmup_time": -1}, "different_model_options.TimeBuildModelParticle.time_setup_model": {"code": "class TimeBuildModelParticle:\n    def time_setup_model(self, model, params):\n        build_model(\"Marquis2019\", model, \"particle\", params)", "min_run_count": 2, "name": "different_model_options.TimeBuildModelParticle.time_setup_model", "number": 0, "param_names": ["model", "model option"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'Fickian diffusion'", "'uniform profile'", "'quadratic profile'", "'quartic profile'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "c32b56d8b7abd0d68c004e6e8fbe9de0acd1d71b5b0d0b1682f648bc8a39b391", "warmup_time": -1}, "different_model_options.TimeBuildModelSEI.time_setup_model": {"code": "class TimeBuildModelSEI:\n    def time_setup_model(self, model, params):\n        build_model(\"Marquis2019\", model, \"SEI\", params)", "min_run_count": 2, "name": "different_model_options.TimeBuildModelSEI.time_setup_model", "number": 0, "param_names": ["model", "model option"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'none'", "'constant'", "'reaction limited'", "'solvent-diffusion limited'", "'electron-migration limited'", "'interstitial-diffusion limited'", "'ec reaction limited'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "d712bc9a59370612798cbb7043cd2ef7477b9ee7df0546cac38242bd598ca18d", "warmup_time": -1}, "different_model_options.TimeBuildModelSurfaceForm.time_setup_model": {"code": "class TimeBuildModelSurfaceForm:\n    def time_setup_model(self, model, params):\n        build_model(\"Marquis2019\", model, \"surface form\", params)", "min_run_count": 2, "name": "different_model_options.TimeBuildModelSurfaceForm.time_setup_model", "number": 0, "param_names": ["model", "model option"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'false'", "'differential'", "'algebraic'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "1aa4c86af11cae5b0d40de18d782c6556c39a2c3b4359e25a29b0ff8bfce3de2", "warmup_time": -1}, "different_model_options.TimeBuildModelThermal.time_setup_model": {"code": "class TimeBuildModelThermal:\n    def time_setup_model(self, model, params):\n        build_model(\"Marquis2019\", model, \"thermal\", params)", "min_run_count": 2, "name": "different_model_options.TimeBuildModelThermal.time_setup_model", "number": 0, "param_names": ["model", "model option"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'isothermal'", "'lumped'", "'x-full'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "498f169375ada7271622b725ddc648abd90553aa621b17a11893b6fbcf1a3c7f", "warmup_time": -1}, "different_model_options.TimeSolveLithiumPlating.time_solve_model": {"code": "class TimeSolveLithiumPlating:\n    def time_solve_model(self, model, params, solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, model, params, solver_class):\n        SolveModel.solve_setup(\n            self, \"OKane2022\", model, \"lithium plating\", params, solver_class\n        )", "min_run_count": 2, "name": "different_model_options.TimeSolveLithiumPlating.time_solve_model", "number": 0, "param_names": ["model", "model option", "solver class"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'none'", "'irreversible'", "'reversible'", "'partially reversible'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "a7e921423ff12485f9191cadd13947c31710cf832f17da13ad68c5de2d0602ae", "warmup_time": -1}, "different_model_options.TimeSolveLossActiveMaterial.time_solve_model": {"code": "class TimeSolveLossActiveMaterial:\n    def time_solve_model(self, model, params, solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, model, params, solver_class):\n        SolveModel.solve_setup(\n            self, \"Ai2020\", model, \"loss of active material\", params, solver_class\n        )", "min_run_count": 2, "name": "different_model_options.TimeSolveLossActiveMaterial.time_solve_model", "number": 0, "param_names": ["model", "model option", "solver class"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'none'", "'stress-driven'", "'reaction-driven'", "'stress and reaction-driven'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "c1dff76d9e08da716685373107680084f50ebfb24c147064023ae3dacb502e06", "warmup_time": -1}, "different_model_options.TimeSolveParticle.time_solve_model": {"code": "class TimeSolveParticle:\n    def time_solve_model(self, model, params, solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, model, params, solver_class):\n        SolveModel.solve_setup(\n            self, \"Marquis2019\", model, \"particle\", params, solver_class\n        )", "min_run_count": 2, "name": "different_model_options.TimeSolveParticle.time_solve_model", "number": 0, "param_names": ["model", "model option", "solver class"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'Fickian diffusion'", "'uniform profile'", "'quadratic profile'", "'quartic profile'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "ac0ac4e14582d06dfa824e725b3727a5180a44001c838a983c6c41458c0f1027", "warmup_time": -1}, "different_model_options.TimeSolveSEI.time_solve_model": {"code": "class TimeSolveSEI:\n    def time_solve_model(self, model, params, solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, model, params, solver_class):\n        SolveModel.solve_setup(self, \"Marquis2019\", model, \"SEI\", params, solver_class)", "min_run_count": 2, "name": "different_model_options.TimeSolveSEI.time_solve_model", "number": 0, "param_names": ["model", "model option", "solver class"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'none'", "'constant'", "'reaction limited'", "'solvent-diffusion limited'", "'electron-migration limited'", "'interstitial-diffusion limited'", "'ec reaction limited'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "ae8aaf2c307ac32961fa5042f713258828cc71346da90c2364f4adb7320b2c2e", "warmup_time": -1}, "different_model_options.TimeSolveSurfaceForm.time_solve_model": {"code": "class TimeSolveSurfaceForm:\n    def time_solve_model(self, model, params, solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, model, params, solver_class):\n        if (model, params, solver_class) == (\n            pybamm.lithium_ion.SPM,\n            \"differential\",\n            pybamm.IDAKLUSolver,\n        ):\n            raise NotImplementedError\n        SolveModel.solve_setup(\n            self, \"Marquis2019\", model, \"surface form\", params, solver_class\n        )", "min_run_count": 2, "name": "different_model_options.TimeSolveSurfaceForm.time_solve_model", "number": 0, "param_names": ["model", "model option", "solver class"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'false'", "'differential'", "'algebraic'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b284405e56214e750ff79f8a73ba2af17787ac9f6621fceb93eabd94f54146d8", "warmup_time": -1}, "different_model_options.TimeSolveThermal.time_solve_model": {"code": "class TimeSolveThermal:\n    def time_solve_model(self, model, params, solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, model, params, solver_class):\n        SolveModel.solve_setup(\n            self, \"Marquis2019\", model, \"thermal\", params, solver_class\n        )", "min_run_count": 2, "name": "different_model_options.TimeSolveThermal.time_solve_model", "number": 0, "param_names": ["model", "model option", "solver class"], "params": [["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["'isothermal'", "'lumped'", "'x-full'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "e13856f7f828f5e2f68e83317010aca0c728a0fbb5fb953b73da8739b742a12a", "warmup_time": -1}, "memory_sims.MemDFNSimulationCCCV.mem_setup_DFN_simulationCCCV": {"code": "class MemDFNSimulationCCCV:\n    def mem_setup_DFN_simulationCCCV(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.DFN()\n        exp = pybamm.Experiment(\n            [\n                \"Discharge at C/5 for 10 hours or until 3.3 V\",\n                \"Rest for 1 hour\",\n                \"Charge at 1 A until 4.1 V\",\n                \"Hold at 4.1 V until 10 mA\",\n                \"Rest for 1 hour\",\n            ]\n        )\n        self.sim = pybamm.Simulation(\n            self.model, parameter_values=self.param, experiment=exp\n        )\n        return self.sim", "name": "memory_sims.MemDFNSimulationCCCV.mem_setup_DFN_simulationCCCV", "param_names": ["parameter"], "params": [["'Marquis2019'", "'Chen2020'"]], "type": "memory", "unit": "bytes", "version": "dcfa286e2ee441d8889df80a96e4bc08a19dce1b0dcc06cff67db8871dde214c"}, "memory_sims.MemDFNSimulationGITT.mem_setup_DFN_simulationGITT": {"code": "class MemDFNSimulationGITT:\n    def mem_setup_DFN_simulationGITT(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        exp = pybamm.Experiment(\n            [(\"Discharge at C/20 for 1 hour\", \"Rest for 1 hour\")] * 20\n        )\n        self.sim = pybamm.Simulation(\n            self.model, parameter_values=self.param, experiment=exp\n        )\n        return self.sim", "name": "memory_sims.MemDFNSimulationGITT.mem_setup_DFN_simulationGITT", "param_names": ["parameter"], "params": [["'Marquis2019'", "'Chen2020'"]], "type": "memory", "unit": "bytes", "version": "19cf3b39382834a8cb86fab71ae7457cb9784ff4be59085c9fbef9fef541601f"}, "memory_sims.MemSPMSimulationCCCV.mem_setup_SPM_simulationCCCV": {"code": "class MemSPMSimulationCCCV:\n    def mem_setup_SPM_simulationCCCV(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        exp = pybamm.Experiment(\n            [\n                \"Discharge at C/5 for 10 hours or until 3.3 V\",\n                \"Rest for 1 hour\",\n                \"Charge at 1 A until 4.1 V\",\n                \"Hold at 4.1 V until 10 mA\",\n                \"Rest for 1 hour\",\n            ]\n        )\n        self.sim = pybamm.Simulation(\n            self.model, parameter_values=self.param, experiment=exp\n        )\n        return self.sim", "name": "memory_sims.MemSPMSimulationCCCV.mem_setup_SPM_simulationCCCV", "param_names": ["parameter"], "params": [["'Marquis2019'", "'Chen2020'"]], "type": "memory", "unit": "bytes", "version": "4d487b81ebe806e06b74c7e8a4e5adf7d2d193a65b9904033b32df9b546a400b"}, "memory_sims.MemSPMSimulationGITT.mem_setup_SPM_simulationGITT": {"code": "class MemSPMSimulationGITT:\n    def mem_setup_SPM_simulationGITT(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        exp = pybamm.Experiment(\n            [(\"Discharge at C/20 for 1 hour\", \"Rest for 1 hour\")] * 20\n        )\n        self.sim = pybamm.Simulation(\n            self.model, parameter_values=self.param, experiment=exp\n        )\n        return self.sim", "name": "memory_sims.MemSPMSimulationGITT.mem_setup_SPM_simulationGITT", "param_names": ["parameter"], "params": [["'Marquis2019'", "'Chen2020'"]], "type": "memory", "unit": "bytes", "version": "e795149bf5ef6de3f6a22e7aae87dee586fcfb2ad48f5567048499f946f84f6e"}, "memory_unit_benchmarks.MemCreateExpression.mem_create_expression": {"code": "class MemCreateExpression:\n    def mem_create_expression(self):\n        self.R = pybamm.Parameter(\"Particle radius [m]\")\n        D = pybamm.Parameter(\"Diffusion coefficient [m2.s-1]\")\n        j = pybamm.Parameter(\"Interfacial current density [A.m-2]\")\n        F = pybamm.Parameter(\"Faraday constant [C.mol-1]\")\n        c0 = pybamm.Parameter(\"Initial concentration [mol.m-3]\")\n        self.model = pybamm.BaseModel()\n    \n        c = pybamm.Variable(\"Concentration [mol.m-3]\", domain=\"negative particle\")\n        N = -D * pybamm.grad(c)\n        dcdt = -pybamm.div(N)\n        self.model.rhs = {c: dcdt}\n    \n        lbc = pybamm.Scalar(0)\n        rbc = -j / F / D\n        self.model.boundary_conditions = {\n            c: {\"left\": (lbc, \"Neumann\"), \"right\": (rbc, \"Neumann\")}\n        }\n    \n        self.model.initial_conditions = {c: c0}\n        self.model.variables = {\n            \"Concentration [mol.m-3]\": c,\n            \"Surface concentration [mol.m-3]\": pybamm.surf(c),\n            \"Flux [mol.m-2.s-1]\": N,\n        }\n        return self.model", "name": "memory_unit_benchmarks.MemCreateExpression.mem_create_expression", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "051d7dd69db532340a54137adc47187cb7fc1788330eeb474f50641a2202c9ff"}, "memory_unit_benchmarks.MemDiscretiseModel.mem_discretise": {"code": "class MemDiscretiseModel:\n    def mem_discretise(self):\n        MemCreateExpression.mem_create_expression(self)\n        MemParameteriseModel.mem_parameterise(self)\n        submesh_types = {\"negative particle\": pybamm.Uniform1DSubMesh}\n        var_pts = {self.r: 20}\n        mesh = pybamm.Mesh(self.geometry, submesh_types, var_pts)\n    \n        spatial_methods = {\"negative particle\": pybamm.FiniteVolume()}\n        disc = pybamm.Discretisation(mesh, spatial_methods)\n        disc.process_model(self.model)\n        return disc\n\n    def setup(self):\n        MemCreateExpression.mem_create_expression(self)\n        MemParameteriseModel.mem_parameterise(self)", "name": "memory_unit_benchmarks.MemDiscretiseModel.mem_discretise", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "161d1e865768e388bedfc8f24eec7c376ac9fef84acf0bdbcdaa583aca95ab68"}, "memory_unit_benchmarks.MemParameteriseModel.mem_parameterise": {"code": "class MemParameteriseModel:\n    def mem_parameterise(self):\n        param = pybamm.ParameterValues(\n            {\n                \"Particle radius [m]\": 10e-6,\n                \"Diffusion coefficient [m2.s-1]\": 3.9e-14,\n                \"Interfacial current density [A.m-2]\": 1.4,\n                \"Faraday constant [C.mol-1]\": 96485,\n                \"Initial concentration [mol.m-3]\": 2.5e4,\n            }\n        )\n    \n        self.r = pybamm.SpatialVariable(\n            \"r\", domain=[\"negative particle\"], coord_sys=\"spherical polar\"\n        )\n    \n        self.geometry = {\n            \"negative particle\": {self.r: {\"min\": pybamm.Scalar(0), \"max\": self.R}}\n        }\n        param.process_model(self.model)\n        param.process_geometry(self.geometry)\n        return param\n\n    def setup(self):\n        MemCreateExpression.mem_create_expression(self)", "name": "memory_unit_benchmarks.MemParameteriseModel.mem_parameterise", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "d219da44966aae64a4ce98e5cfde0a0acedae4fdac3bcff12064b8d77fc7ef1a"}, "memory_unit_benchmarks.MemSolveModel.mem_solve": {"code": "class MemSolveModel:\n    def mem_solve(self):\n        solver = pybamm.ScipySolver()\n        t = np.linspace(0, 3600, 600)\n        solver.solve(self.model, t)\n        return solver\n\n    def setup(self):\n        MemCreateExpression.mem_create_expression(self)\n        MemParameteriseModel.mem_parameterise(self)\n        MemDiscretiseModel.mem_discretise(self)", "name": "memory_unit_benchmarks.MemSolveModel.mem_solve", "param_names": [], "params": [], "type": "memory", "unit": "bytes", "version": "0098dfcd1304100f58897a06d62ad61d924a646365de3706e91294f8d89943d3"}, "time_setup_models_and_sims.TimeBuildDFN.time_setup_DFN": {"code": "class TimeBuildDFN:\n    def time_setup_DFN(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.DFN()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildDFN.time_setup_DFN", "number": 0, "param_names": ["parameter"], "params": [["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'OKane2022'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "5294948f9d12b08e0ca91e872f066e08b04cc20a728431d490a7f389fb25d4cb", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildDFNSimulation.time_setup_DFN_simulation": {"code": "class TimeBuildDFNSimulation:\n    def time_setup_DFN_simulation(self, with_experiment, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.DFN()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildDFNSimulation.time_setup_DFN_simulation", "number": 0, "param_names": ["with experiment", "parameter"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'OKane2022'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "bec1ef0368e5b10eb69f23a0228764e22ba74a9ce379a2d632fe081d9b554772", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildSPM.time_setup_SPM": {"code": "class TimeBuildSPM:\n    def time_setup_SPM(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildSPM.time_setup_SPM", "number": 0, "param_names": ["parameter"], "params": [["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'OKane2022'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "9cc0fc69309859c6bf4b82d51013e8fe94dd813b79bac34773123bfbe9575b69", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildSPMSimulation.time_setup_SPM_simulation": {"code": "class TimeBuildSPMSimulation:\n    def time_setup_SPM_simulation(self, with_experiment, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPM()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildSPMSimulation.time_setup_SPM_simulation", "number": 0, "param_names": ["with experiment", "parameter"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'OKane2022'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "dcc0e5a798b16647676f9beb1311bd07fcbd43b5f1445721dee62457345f84f0", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildSPMe.time_setup_SPMe": {"code": "class TimeBuildSPMe:\n    def time_setup_SPMe(self, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPMe()\n        self.param.process_model(self.model)\n        compute_discretisation(self.model, self.param).process_model(self.model)", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildSPMe.time_setup_SPMe", "number": 0, "param_names": ["parameter"], "params": [["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'OKane2022'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "42f066a302b7c7c0b8678546b480bc896e28faa8487a3ada7570e4b587d592db", "warmup_time": -1}, "time_setup_models_and_sims.TimeBuildSPMeSimulation.time_setup_SPMe_simulation": {"code": "class TimeBuildSPMeSimulation:\n    def time_setup_SPMe_simulation(self, with_experiment, parameters):\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = pybamm.lithium_ion.SPMe()\n        if with_experiment:\n            exp = pybamm.Experiment(\n                [\n                    \"Discharge at 0.1C until 3.105 V\",\n                ]\n            )\n            pybamm.Simulation(self.model, parameter_values=self.param, experiment=exp)\n        else:\n            pybamm.Simulation(self.model, parameter_values=self.param, C_rate=1)", "min_run_count": 2, "name": "time_setup_models_and_sims.TimeBuildSPMeSimulation.time_setup_SPMe_simulation", "number": 0, "param_names": ["with experiment", "parameter"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Mohtat2020'", "'Chen2020'", "'OKane2022'", "'Ecker2015'"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "fa33f32dc52b29c7d15644fc09b82fa83412d56629204948b3a5291eb4d299d7", "warmup_time": -1}, "time_sims_experiments.TimeSimulation.time_setup": {"code": "class TimeSimulation:\n    def time_setup(self, experiment, parameters, model_class, solver_class):\n        param = pybamm.ParameterValues(parameters)\n        model = model_class()\n        solver = solver_class()\n        exp = pybamm.Experiment(self.experiment_descriptions[experiment])\n        pybamm.Simulation(model, parameter_values=param, experiment=exp, solver=solver)\n\n    def setup(self, experiment, parameters, model_class, solver_class):\n        if (experiment, parameters, model_class, solver_class) == (\n            \"GITT\",\n            \"Marquis2019\",\n            pybamm.lithium_ion.DFN,\n            pybamm.CasadiSolver,\n        ):\n            raise NotImplementedError\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = model_class()\n        self.solver = solver_class()\n        self.exp = pybamm.Experiment(self.experiment_descriptions[experiment])\n        self.sim = pybamm.Simulation(\n            self.model,\n            parameter_values=self.param,\n            experiment=self.exp,\n            solver=self.solver,\n        )", "min_run_count": 2, "name": "time_sims_experiments.TimeSimulation.time_setup", "number": 0, "param_names": ["experiment", "parameter", "model_class", "solver_class"], "params": [["'CCCV'", "'GITT'"], ["'Marquis2019'", "'Chen2020'"], ["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "70bb63e00480334e8fb1ebab75ebd483d2e781180b0c106d2217583902b2f268", "warmup_time": -1}, "time_sims_experiments.TimeSimulation.time_solve": {"code": "class TimeSimulation:\n    def time_solve(self, experiment, parameters, model_class, solver_class):\n        self.sim.solve()\n\n    def setup(self, experiment, parameters, model_class, solver_class):\n        if (experiment, parameters, model_class, solver_class) == (\n            \"GITT\",\n            \"Marquis2019\",\n            pybamm.lithium_ion.DFN,\n            pybamm.CasadiSolver,\n        ):\n            raise NotImplementedError\n        self.param = pybamm.ParameterValues(parameters)\n        self.model = model_class()\n        self.solver = solver_class()\n        self.exp = pybamm.Experiment(self.experiment_descriptions[experiment])\n        self.sim = pybamm.Simulation(\n            self.model,\n            parameter_values=self.param,\n            experiment=self.exp,\n            solver=self.solver,\n        )", "min_run_count": 2, "name": "time_sims_experiments.TimeSimulation.time_solve", "number": 0, "param_names": ["experiment", "parameter", "model_class", "solver_class"], "params": [["'CCCV'", "'GITT'"], ["'Marquis2019'", "'Chen2020'"], ["<class 'pybamm.models.full_battery_models.lithium_ion.spm.SPM'>", "<class 'pybamm.models.full_battery_models.lithium_ion.dfn.DFN'>"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "5581bd492a800415d9c6a1a381d87fcbc56564996b9d82ebe0f0c9b7518cc948", "warmup_time": -1}, "time_solve_models.TimeSolveDFN.time_solve_model": {"code": "class TimeSolveDFN:\n    def time_solve_model(self, solve_first, parameters, solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters, solver_class):\n        if (parameters, solver_class) == (\n            \"ORegan2022\",\n            pybamm.CasadiSolver,\n        ):\n            raise NotImplementedError\n        self.solver = solver_class()\n        self.model = pybamm.lithium_ion.DFN()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, self.solver, self.t_eval)", "min_run_count": 2, "name": "time_solve_models.TimeSolveDFN.time_solve_model", "number": 0, "param_names": ["solve first", "parameter", "solver_class"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2022'", "'Prada2013'", "'Ai2020'", "'Ramadass2004'", "'Chen2020'", "'Ecker2015'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "2f249ee7769f90524c47792571e7fe7ffdbef508d9090cc00ede84a16dc8d177", "warmup_time": -1}, "time_solve_models.TimeSolveSPM.time_solve_model": {"code": "class TimeSolveSPM:\n    def time_solve_model(self, solve_first, parameters, solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters, solver_class):\n        self.solver = solver_class()\n        self.model = pybamm.lithium_ion.SPM()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, self.solver, self.t_eval)", "min_run_count": 2, "name": "time_solve_models.TimeSolveSPM.time_solve_model", "number": 0, "param_names": ["solve first", "parameter", "solver_class"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ramadass2004'", "'Chen2020'", "'Ecker2015'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "585652f5d88e12033cb4a7e8624f0289ddbc9e33d255c8022ff613a2e1acdf74", "warmup_time": -1}, "time_solve_models.TimeSolveSPMe.time_solve_model": {"code": "class TimeSolveSPMe:\n    def time_solve_model(self, solve_first, parameters, solver_class):\n        self.solver.solve(self.model, t_eval=self.t_eval)\n\n    def setup(self, solve_first, parameters, solver_class):\n        self.solver = solver_class()\n        self.model = pybamm.lithium_ion.SPMe()\n        c_rate = 1\n        tmax = 4000 / c_rate\n        nb_points = 500\n        self.t_eval = np.linspace(0, tmax, nb_points)\n        geometry = self.model.default_geometry\n    \n        # load parameter values and process model and geometry\n        param = pybamm.ParameterValues(parameters)\n        param.process_model(self.model)\n        param.process_geometry(geometry)\n    \n        # set mesh\n        var_pts = {\n            \"x_n\": 20,\n            \"x_s\": 20,\n            \"x_p\": 20,\n            \"r_n\": 30,\n            \"r_p\": 30,\n            \"y\": 10,\n            \"z\": 10,\n        }\n        mesh = pybamm.Mesh(geometry, self.model.default_submesh_types, var_pts)\n    \n        # discretise model\n        disc = pybamm.Discretisation(mesh, self.model.default_spatial_methods)\n        disc.process_model(self.model)\n        if solve_first:\n            solve_model_once(self.model, self.solver, self.t_eval)", "min_run_count": 2, "name": "time_solve_models.TimeSolveSPMe.time_solve_model", "number": 0, "param_names": ["solve first", "parameter", "solver_class"], "params": [["False", "True"], ["'Marquis2019'", "'ORegan2022'", "'NCA_Kim2011'", "'Prada2013'", "'Ramadass2004'", "'Chen2020'", "'Ecker2015'"], ["<class 'pybamm.solvers.casadi_solver.CasadiSolver'>", "<class 'pybamm.solvers.idaklu_solver.IDAKLUSolver'>"]], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "29fa52398e50081bc33cbf7c010649649e82aa3b26e967430dba19d70ca80712", "warmup_time": -1}, "unit_benchmarks.TimeCreateExpression.time_create_expression": {"code": "class TimeCreateExpression:\n    def time_create_expression(self):\n        self.R = pybamm.Parameter(\"Particle radius [m]\")\n        D = pybamm.Parameter(\"Diffusion coefficient [m2.s-1]\")\n        j = pybamm.Parameter(\"Interfacial current density [A.m-2]\")\n        F = pybamm.Parameter(\"Faraday constant [C.mol-1]\")\n        c0 = pybamm.Parameter(\"Initial concentration [mol.m-3]\")\n        self.model = pybamm.BaseModel()\n    \n        c = pybamm.Variable(\"Concentration [mol.m-3]\", domain=\"negative particle\")\n        N = -D * pybamm.grad(c)\n        dcdt = -pybamm.div(N)\n        self.model.rhs = {c: dcdt}\n    \n        lbc = pybamm.Scalar(0)\n        rbc = -j / F / D\n        self.model.boundary_conditions = {\n            c: {\"left\": (lbc, \"Neumann\"), \"right\": (rbc, \"Neumann\")}\n        }\n    \n        self.model.initial_conditions = {c: c0}\n        self.model.variables = {\n            \"Concentration [mol.m-3]\": c,\n            \"Surface concentration [mol.m-3]\": pybamm.surf(c),\n            \"Flux [mol.m-2.s-1]\": N,\n        }", "min_run_count": 2, "name": "unit_benchmarks.TimeCreateExpression.time_create_expression", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "d50f4d23b4da39a89763df3a16060d53690898d238986a03d1867d86fdd8baf6", "warmup_time": -1}, "unit_benchmarks.TimeDiscretiseModel.time_discretise": {"code": "class TimeDiscretiseModel:\n    def time_discretise(self):\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)\n        submesh_types = {\"negative particle\": pybamm.Uniform1DSubMesh}\n        var_pts = {self.r: 20}\n        mesh = pybamm.Mesh(self.geometry, submesh_types, var_pts)\n    \n        spatial_methods = {\"negative particle\": pybamm.FiniteVolume()}\n        disc = pybamm.Discretisation(mesh, spatial_methods)\n        disc.process_model(self.model)\n\n    def setup(self):\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeDiscretiseModel.time_discretise", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "4fbfe1ce99553daa3ea65f929308b968644f29f5a930c12c92505465fb85c788", "warmup_time": -1}, "unit_benchmarks.TimeParameteriseModel.time_parameterise": {"code": "class TimeParameteriseModel:\n    def time_parameterise(self):\n        param = pybamm.ParameterValues(\n            {\n                \"Particle radius [m]\": 10e-6,\n                \"Diffusion coefficient [m2.s-1]\": 3.9e-14,\n                \"Interfacial current density [A.m-2]\": 1.4,\n                \"Faraday constant [C.mol-1]\": 96485,\n                \"Initial concentration [mol.m-3]\": 2.5e4,\n            }\n        )\n    \n        self.r = pybamm.SpatialVariable(\n            \"r\", domain=[\"negative particle\"], coord_sys=\"spherical polar\"\n        )\n    \n        self.geometry = {\n            \"negative particle\": {self.r: {\"min\": pybamm.Scalar(0), \"max\": self.R}}\n        }\n        param.process_model(self.model)\n        param.process_geometry(self.geometry)\n\n    def setup(self):\n        TimeCreateExpression.time_create_expression(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeParameteriseModel.time_parameterise", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "58d52171a131f2e05d1ca3d07e0a65d958c048aa8fe7d01aa04959f95800017d", "warmup_time": -1}, "unit_benchmarks.TimeSolveModel.time_solve": {"code": "class TimeSolveModel:\n    def time_solve(self):\n        solver = pybamm.ScipySolver()\n        t = np.linspace(0, 3600, 600)\n        solver.solve(self.model, t)\n\n    def setup(self):\n        TimeCreateExpression.time_create_expression(self)\n        TimeParameteriseModel.time_parameterise(self)\n        TimeDiscretiseModel.time_discretise(self)", "min_run_count": 2, "name": "unit_benchmarks.TimeSolveModel.time_solve", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "f55331e31db8421a38d5fc1cae40690d1af2dfe4dbbcfbbcf716519cf3ff2946", "warmup_time": -1}}, "machines": {"GitHubRunner": {"machine": "GitHubRunner", "version": 1}}, "tags": {"v0.1.0": 3639, "v0.2.0": 4985, "v0.2.1": 5321, "v0.2.2": 6031, "v0.2.3": 6477, "v0.2.4": 6840, "v0.3.0": 7399, "v0.3.0-beta": 7336, "v0.4.0": 8453, "v21.08": 9255, "v21.10": 9541, "v21.11": 9912, "v21.12": 10061, "v21.9": 9427, "v22.1": 10273, "v22.10": 11963, "v22.11": 12341, "v22.11.1": 12472, "v22.12": 12538, "v22.2": 10333, "v22.3": 10460, "v22.4": 10552, "v22.5": 10713, "v22.6": 10854, "v22.7": 11181, "v22.8": 11397, "v22.9": 11639, "v23.1": 12687, "v23.2": 12970, "v23.3": 13306, "v23.4": 13456, "v23.4.1": 13468, "v23.5": 14047, "v23.5rc0": 13868}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}